{"ast":null,"code":"/*!\nFullCalendar Time Grid Plugin v4.3.0\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\nimport { createFormatter, removeElement, cssToStr, isMultiDayRange, htmlEscape, compareByFieldSpecs, applyStyle, FgEventRenderer, buildSegCompareObj, FillRenderer, memoizeRendering, createDuration, wholeDivideDurations, findElements, PositionCache, startOfDay, asRoughMs, formatIsoTimeString, addDurations, htmlToElement, createElement, multiplyDuration, DateComponent, hasBgRendering, Splitter, diffDays, buildGotoAnchorHtml, getAllDayHtml, ScrollComponent, matchCellWidths, uncompensateScroll, compensateScroll, subtractInnerElHeight, View, memoize, intersectRanges, Slicer, DayHeader, DaySeries, DayTable, createPlugin } from '@fullcalendar/core';\nimport { DayBgRow, DayGrid, SimpleDayGrid } from '@fullcalendar/daygrid';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n/*\nOnly handles foreground segs.\nDoes not own rendering. Use for low-level util methods by TimeGrid.\n*/\n\n\nvar TimeGridEventRenderer =\n/** @class */\nfunction (_super) {\n  __extends(TimeGridEventRenderer, _super);\n\n  function TimeGridEventRenderer(timeGrid) {\n    var _this = _super.call(this, timeGrid.context) || this;\n\n    _this.timeGrid = timeGrid;\n    _this.fullTimeFormat = createFormatter({\n      hour: 'numeric',\n      minute: '2-digit',\n      separator: _this.context.options.defaultRangeSeparator\n    });\n    return _this;\n  } // Given an array of foreground segments, render a DOM element for each, computes position,\n  // and attaches to the column inner-container elements.\n\n\n  TimeGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n    var segsByCol = this.timeGrid.groupSegsByCol(segs); // order the segs within each column\n    // TODO: have groupSegsByCol do this?\n\n    for (var col = 0; col < segsByCol.length; col++) {\n      segsByCol[col] = this.sortEventSegs(segsByCol[col]);\n    }\n\n    this.segsByCol = segsByCol;\n    this.timeGrid.attachSegsByCol(segsByCol, this.timeGrid.fgContainerEls);\n  };\n\n  TimeGridEventRenderer.prototype.detachSegs = function (segs) {\n    segs.forEach(function (seg) {\n      removeElement(seg.el);\n    });\n    this.segsByCol = null;\n  };\n\n  TimeGridEventRenderer.prototype.computeSegSizes = function (allSegs) {\n    var _a = this,\n        timeGrid = _a.timeGrid,\n        segsByCol = _a.segsByCol;\n\n    var colCnt = timeGrid.colCnt;\n    timeGrid.computeSegVerticals(allSegs); // horizontals relies on this\n\n    if (segsByCol) {\n      for (var col = 0; col < colCnt; col++) {\n        this.computeSegHorizontals(segsByCol[col]); // compute horizontal coordinates, z-index's, and reorder the array\n      }\n    }\n  };\n\n  TimeGridEventRenderer.prototype.assignSegSizes = function (allSegs) {\n    var _a = this,\n        timeGrid = _a.timeGrid,\n        segsByCol = _a.segsByCol;\n\n    var colCnt = timeGrid.colCnt;\n    timeGrid.assignSegVerticals(allSegs); // horizontals relies on this\n\n    if (segsByCol) {\n      for (var col = 0; col < colCnt; col++) {\n        this.assignSegCss(segsByCol[col]);\n      }\n    }\n  }; // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined\n\n\n  TimeGridEventRenderer.prototype.computeEventTimeFormat = function () {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      meridiem: false\n    };\n  }; // Computes a default `displayEventEnd` value if one is not expliclty defined\n\n\n  TimeGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n    return true;\n  }; // Renders the HTML for a single event segment's default rendering\n\n\n  TimeGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {\n    var view = this.context.view;\n    var eventRange = seg.eventRange;\n    var eventDef = eventRange.def;\n    var eventUi = eventRange.ui;\n    var allDay = eventDef.allDay;\n    var isDraggable = view.computeEventDraggable(eventDef, eventUi);\n    var isResizableFromStart = seg.isStart && view.computeEventStartResizable(eventDef, eventUi);\n    var isResizableFromEnd = seg.isEnd && view.computeEventEndResizable(eventDef, eventUi);\n    var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);\n    var skinCss = cssToStr(this.getSkinCss(eventUi));\n    var timeText;\n    var fullTimeText; // more verbose time text. for the print stylesheet\n\n    var startTimeText; // just the start time text\n\n    classes.unshift('fc-time-grid-event'); // if the event appears to span more than one day...\n\n    if (isMultiDayRange(eventRange.range)) {\n      // Don't display time text on segments that run entirely through a day.\n      // That would appear as midnight-midnight and would look dumb.\n      // Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)\n      if (seg.isStart || seg.isEnd) {\n        var unzonedStart = seg.start;\n        var unzonedEnd = seg.end;\n        timeText = this._getTimeText(unzonedStart, unzonedEnd, allDay); // TODO: give the timezones\n\n        fullTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, this.fullTimeFormat);\n        startTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, null, false); // displayEnd=false\n      }\n    } else {\n      // Display the normal time text for the *event's* times\n      timeText = this.getTimeText(eventRange);\n      fullTimeText = this.getTimeText(eventRange, this.fullTimeFormat);\n      startTimeText = this.getTimeText(eventRange, null, false); // displayEnd=false\n    }\n\n    return '<a class=\"' + classes.join(' ') + '\"' + (eventDef.url ? ' href=\"' + htmlEscape(eventDef.url) + '\"' : '') + (skinCss ? ' style=\"' + skinCss + '\"' : '') + '>' + '<div class=\"fc-content\">' + (timeText ? '<div class=\"fc-time\"' + ' data-start=\"' + htmlEscape(startTimeText) + '\"' + ' data-full=\"' + htmlEscape(fullTimeText) + '\"' + '>' + '<span>' + htmlEscape(timeText) + '</span>' + '</div>' : '') + (eventDef.title ? '<div class=\"fc-title\">' + htmlEscape(eventDef.title) + '</div>' : '') + '</div>' + (\n    /* TODO: write CSS for this\n    (isResizableFromStart ?\n      '<div class=\"fc-resizer fc-start-resizer\"></div>' :\n      ''\n      ) +\n    */\n    isResizableFromEnd ? '<div class=\"fc-resizer fc-end-resizer\"></div>' : '') + '</a>';\n  }; // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n  // Assumed the segs are already ordered.\n  // NOTE: Also reorders the given array by date!\n\n\n  TimeGridEventRenderer.prototype.computeSegHorizontals = function (segs) {\n    var levels;\n    var level0;\n    var i;\n    levels = buildSlotSegLevels(segs);\n    computeForwardSlotSegs(levels);\n\n    if (level0 = levels[0]) {\n      for (i = 0; i < level0.length; i++) {\n        computeSlotSegPressures(level0[i]);\n      }\n\n      for (i = 0; i < level0.length; i++) {\n        this.computeSegForwardBack(level0[i], 0, 0);\n      }\n    }\n  }; // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n  // from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n  // seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n  //\n  // The segment might be part of a \"series\", which means consecutive segments with the same pressure\n  // who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n  // segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n  // coordinate of the first segment in the series.\n\n\n  TimeGridEventRenderer.prototype.computeSegForwardBack = function (seg, seriesBackwardPressure, seriesBackwardCoord) {\n    var forwardSegs = seg.forwardSegs;\n    var i;\n\n    if (seg.forwardCoord === undefined) {\n      // not already computed\n      if (!forwardSegs.length) {\n        // if there are no forward segments, this segment should butt up against the edge\n        seg.forwardCoord = 1;\n      } else {\n        // sort highest pressure first\n        this.sortForwardSegs(forwardSegs); // this segment's forwardCoord will be calculated from the backwardCoord of the\n        // highest-pressure forward segment.\n\n        this.computeSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);\n        seg.forwardCoord = forwardSegs[0].backwardCoord;\n      } // calculate the backwardCoord from the forwardCoord. consider the series\n\n\n      seg.backwardCoord = seg.forwardCoord - (seg.forwardCoord - seriesBackwardCoord) / ( // available width for series\n      seriesBackwardPressure + 1); // # of segments in the series\n      // use this segment's coordinates to computed the coordinates of the less-pressurized\n      // forward segments\n\n      for (i = 0; i < forwardSegs.length; i++) {\n        this.computeSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);\n      }\n    }\n  };\n\n  TimeGridEventRenderer.prototype.sortForwardSegs = function (forwardSegs) {\n    var objs = forwardSegs.map(buildTimeGridSegCompareObj);\n    var specs = [// put higher-pressure first\n    {\n      field: 'forwardPressure',\n      order: -1\n    }, // put segments that are closer to initial edge first (and favor ones with no coords yet)\n    {\n      field: 'backwardCoord',\n      order: 1\n    }].concat(this.context.view.eventOrderSpecs);\n    objs.sort(function (obj0, obj1) {\n      return compareByFieldSpecs(obj0, obj1, specs);\n    });\n    return objs.map(function (c) {\n      return c._seg;\n    });\n  }; // Given foreground event segments that have already had their position coordinates computed,\n  // assigns position-related CSS values to their elements.\n\n\n  TimeGridEventRenderer.prototype.assignSegCss = function (segs) {\n    for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n      var seg = segs_1[_i];\n      applyStyle(seg.el, this.generateSegCss(seg));\n\n      if (seg.level > 0) {\n        seg.el.classList.add('fc-time-grid-event-inset');\n      } // if the event is short that the title will be cut off,\n      // attach a className that condenses the title into the time area.\n\n\n      if (seg.eventRange.def.title && seg.bottom - seg.top < 30) {\n        seg.el.classList.add('fc-short'); // TODO: \"condensed\" is a better name\n      }\n    }\n  }; // Generates an object with CSS properties/values that should be applied to an event segment element.\n  // Contains important positioning-related properties that should be applied to any event element, customized or not.\n\n\n  TimeGridEventRenderer.prototype.generateSegCss = function (seg) {\n    var shouldOverlap = this.context.options.slotEventOverlap;\n    var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point\n\n    var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point\n\n    var props = this.timeGrid.generateSegVerticalCss(seg); // get top/bottom first\n\n    var isRtl = this.timeGrid.isRtl;\n    var left; // amount of space from left edge, a fraction of the total width\n\n    var right; // amount of space from right edge, a fraction of the total width\n\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);\n    }\n\n    if (isRtl) {\n      left = 1 - forwardCoord;\n      right = backwardCoord;\n    } else {\n      left = backwardCoord;\n      right = 1 - forwardCoord;\n    }\n\n    props.zIndex = seg.level + 1; // convert from 0-base to 1-based\n\n    props.left = left * 100 + '%';\n    props.right = right * 100 + '%';\n\n    if (shouldOverlap && seg.forwardPressure) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n    }\n\n    return props;\n  };\n\n  return TimeGridEventRenderer;\n}(FgEventRenderer); // Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\n\n\nfunction buildSlotSegLevels(segs) {\n  var levels = [];\n  var i;\n  var seg;\n  var j;\n\n  for (i = 0; i < segs.length; i++) {\n    seg = segs[i]; // go through all the levels and stop on the first level where there are no collisions\n\n    for (j = 0; j < levels.length; j++) {\n      if (!computeSlotSegCollisions(seg, levels[j]).length) {\n        break;\n      }\n    }\n\n    seg.level = j;\n    (levels[j] || (levels[j] = [])).push(seg);\n  }\n\n  return levels;\n} // For every segment, figure out the other segments that are in subsequent\n// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\n\n\nfunction computeForwardSlotSegs(levels) {\n  var i;\n  var level;\n  var j;\n  var seg;\n  var k;\n\n  for (i = 0; i < levels.length; i++) {\n    level = levels[i];\n\n    for (j = 0; j < level.length; j++) {\n      seg = level[j];\n      seg.forwardSegs = [];\n\n      for (k = i + 1; k < levels.length; k++) {\n        computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);\n      }\n    }\n  }\n} // Figure out which path forward (via seg.forwardSegs) results in the longest path until\n// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\n\n\nfunction computeSlotSegPressures(seg) {\n  var forwardSegs = seg.forwardSegs;\n  var forwardPressure = 0;\n  var i;\n  var forwardSeg;\n\n  if (seg.forwardPressure === undefined) {\n    // not already computed\n    for (i = 0; i < forwardSegs.length; i++) {\n      forwardSeg = forwardSegs[i]; // figure out the child's maximum forward path\n\n      computeSlotSegPressures(forwardSeg); // either use the existing maximum, or use the child's forward pressure\n      // plus one (for the forwardSeg itself)\n\n      forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);\n    }\n\n    seg.forwardPressure = forwardPressure;\n  }\n} // Find all the segments in `otherSegs` that vertically collide with `seg`.\n// Append into an optionally-supplied `results` array and return.\n\n\nfunction computeSlotSegCollisions(seg, otherSegs, results) {\n  if (results === void 0) {\n    results = [];\n  }\n\n  for (var i = 0; i < otherSegs.length; i++) {\n    if (isSlotSegCollision(seg, otherSegs[i])) {\n      results.push(otherSegs[i]);\n    }\n  }\n\n  return results;\n} // Do these segments occupy the same vertical space?\n\n\nfunction isSlotSegCollision(seg1, seg2) {\n  return seg1.bottom > seg2.top && seg1.top < seg2.bottom;\n}\n\nfunction buildTimeGridSegCompareObj(seg) {\n  var obj = buildSegCompareObj(seg);\n  obj.forwardPressure = seg.forwardPressure;\n  obj.backwardCoord = seg.backwardCoord;\n  return obj;\n}\n\nvar TimeGridMirrorRenderer =\n/** @class */\nfunction (_super) {\n  __extends(TimeGridMirrorRenderer, _super);\n\n  function TimeGridMirrorRenderer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n    this.segsByCol = this.timeGrid.groupSegsByCol(segs);\n    this.timeGrid.attachSegsByCol(this.segsByCol, this.timeGrid.mirrorContainerEls);\n    this.sourceSeg = mirrorInfo.sourceSeg;\n  };\n\n  TimeGridMirrorRenderer.prototype.generateSegCss = function (seg) {\n    var props = _super.prototype.generateSegCss.call(this, seg);\n\n    var sourceSeg = this.sourceSeg;\n\n    if (sourceSeg && sourceSeg.col === seg.col) {\n      var sourceSegProps = _super.prototype.generateSegCss.call(this, sourceSeg);\n\n      props.left = sourceSegProps.left;\n      props.right = sourceSegProps.right;\n      props.marginLeft = sourceSegProps.marginLeft;\n      props.marginRight = sourceSegProps.marginRight;\n    }\n\n    return props;\n  };\n\n  return TimeGridMirrorRenderer;\n}(TimeGridEventRenderer);\n\nvar TimeGridFillRenderer =\n/** @class */\nfunction (_super) {\n  __extends(TimeGridFillRenderer, _super);\n\n  function TimeGridFillRenderer(timeGrid) {\n    var _this = _super.call(this, timeGrid.context) || this;\n\n    _this.timeGrid = timeGrid;\n    return _this;\n  }\n\n  TimeGridFillRenderer.prototype.attachSegs = function (type, segs) {\n    var timeGrid = this.timeGrid;\n    var containerEls; // TODO: more efficient lookup\n\n    if (type === 'bgEvent') {\n      containerEls = timeGrid.bgContainerEls;\n    } else if (type === 'businessHours') {\n      containerEls = timeGrid.businessContainerEls;\n    } else if (type === 'highlight') {\n      containerEls = timeGrid.highlightContainerEls;\n    }\n\n    timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs), containerEls);\n    return segs.map(function (seg) {\n      return seg.el;\n    });\n  };\n\n  TimeGridFillRenderer.prototype.computeSegSizes = function (segs) {\n    this.timeGrid.computeSegVerticals(segs);\n  };\n\n  TimeGridFillRenderer.prototype.assignSegSizes = function (segs) {\n    this.timeGrid.assignSegVerticals(segs);\n  };\n\n  return TimeGridFillRenderer;\n}(FillRenderer);\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\n\n\nvar AGENDA_STOCK_SUB_DURATIONS = [{\n  hours: 1\n}, {\n  minutes: 30\n}, {\n  minutes: 15\n}, {\n  seconds: 30\n}, {\n  seconds: 15\n}];\n\nvar TimeGrid =\n/** @class */\nfunction (_super) {\n  __extends(TimeGrid, _super);\n\n  function TimeGrid(context, el, renderProps) {\n    var _this = _super.call(this, context, el) || this;\n\n    _this.isSlatSizesDirty = false;\n    _this.isColSizesDirty = false;\n    _this.renderSlats = memoizeRendering(_this._renderSlats);\n    var eventRenderer = _this.eventRenderer = new TimeGridEventRenderer(_this);\n    var fillRenderer = _this.fillRenderer = new TimeGridFillRenderer(_this);\n    _this.mirrorRenderer = new TimeGridMirrorRenderer(_this);\n    var renderColumns = _this.renderColumns = memoizeRendering(_this._renderColumns, _this._unrenderColumns);\n    _this.renderBusinessHours = memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderColumns]);\n    _this.renderDateSelection = memoizeRendering(_this._renderDateSelection, _this._unrenderDateSelection, [renderColumns]);\n    _this.renderFgEvents = memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderColumns]);\n    _this.renderBgEvents = memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderColumns]);\n    _this.renderEventSelection = memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n    _this.renderEventDrag = memoizeRendering(_this._renderEventDrag, _this._unrenderEventDrag, [renderColumns]);\n    _this.renderEventResize = memoizeRendering(_this._renderEventResize, _this._unrenderEventResize, [renderColumns]);\n\n    _this.processOptions();\n\n    el.innerHTML = '<div class=\"fc-bg\"></div>' + '<div class=\"fc-slats\"></div>' + '<hr class=\"fc-divider ' + _this.theme.getClass('widgetHeader') + '\" style=\"display:none\" />';\n    _this.rootBgContainerEl = el.querySelector('.fc-bg');\n    _this.slatContainerEl = el.querySelector('.fc-slats');\n    _this.bottomRuleEl = el.querySelector('.fc-divider');\n    _this.renderProps = renderProps;\n    return _this;\n  }\n  /* Options\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Parses various options into properties of this object\n\n\n  TimeGrid.prototype.processOptions = function () {\n    var slotDuration = this.opt('slotDuration');\n    var snapDuration = this.opt('snapDuration');\n    var snapsPerSlot;\n    var input;\n    slotDuration = createDuration(slotDuration);\n    snapDuration = snapDuration ? createDuration(snapDuration) : slotDuration;\n    snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration);\n\n    if (snapsPerSlot === null) {\n      snapDuration = slotDuration;\n      snapsPerSlot = 1; // TODO: say warning?\n    }\n\n    this.slotDuration = slotDuration;\n    this.snapDuration = snapDuration;\n    this.snapsPerSlot = snapsPerSlot; // might be an array value (for TimelineView).\n    // if so, getting the most granular entry (the last one probably).\n\n    input = this.opt('slotLabelFormat');\n\n    if (Array.isArray(input)) {\n      input = input[input.length - 1];\n    }\n\n    this.labelFormat = createFormatter(input || {\n      hour: 'numeric',\n      minute: '2-digit',\n      omitZeroMinute: true,\n      meridiem: 'short'\n    });\n    input = this.opt('slotLabelInterval');\n    this.labelInterval = input ? createDuration(input) : this.computeLabelInterval(slotDuration);\n  }; // Computes an automatic value for slotLabelInterval\n\n\n  TimeGrid.prototype.computeLabelInterval = function (slotDuration) {\n    var i;\n    var labelInterval;\n    var slotsPerLabel; // find the smallest stock label interval that results in more than one slots-per-label\n\n    for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {\n      labelInterval = createDuration(AGENDA_STOCK_SUB_DURATIONS[i]);\n      slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration);\n\n      if (slotsPerLabel !== null && slotsPerLabel > 1) {\n        return labelInterval;\n      }\n    }\n\n    return slotDuration; // fall back\n  };\n  /* Rendering\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype.render = function (props) {\n    var cells = props.cells;\n    this.colCnt = cells.length;\n    this.renderSlats(props.dateProfile);\n    this.renderColumns(props.cells, props.dateProfile);\n    this.renderBusinessHours(props.businessHourSegs);\n    this.renderDateSelection(props.dateSelectionSegs);\n    this.renderFgEvents(props.fgEventSegs);\n    this.renderBgEvents(props.bgEventSegs);\n    this.renderEventSelection(props.eventSelection);\n    this.renderEventDrag(props.eventDrag);\n    this.renderEventResize(props.eventResize);\n  };\n\n  TimeGrid.prototype.destroy = function () {\n    _super.prototype.destroy.call(this); // should unrender everything else too\n\n\n    this.renderSlats.unrender();\n    this.renderColumns.unrender();\n  };\n\n  TimeGrid.prototype.updateSize = function (isResize) {\n    var _a = this,\n        fillRenderer = _a.fillRenderer,\n        eventRenderer = _a.eventRenderer,\n        mirrorRenderer = _a.mirrorRenderer;\n\n    if (isResize || this.isSlatSizesDirty) {\n      this.buildSlatPositions();\n      this.isSlatSizesDirty = false;\n    }\n\n    if (isResize || this.isColSizesDirty) {\n      this.buildColPositions();\n      this.isColSizesDirty = false;\n    }\n\n    fillRenderer.computeSizes(isResize);\n    eventRenderer.computeSizes(isResize);\n    mirrorRenderer.computeSizes(isResize);\n    fillRenderer.assignSizes(isResize);\n    eventRenderer.assignSizes(isResize);\n    mirrorRenderer.assignSizes(isResize);\n  };\n\n  TimeGrid.prototype._renderSlats = function (dateProfile) {\n    var theme = this.theme;\n    this.slatContainerEl.innerHTML = '<table class=\"' + theme.getClass('tableGrid') + '\">' + this.renderSlatRowHtml(dateProfile) + '</table>';\n    this.slatEls = findElements(this.slatContainerEl, 'tr');\n    this.slatPositions = new PositionCache(this.el, this.slatEls, false, true // vertical\n    );\n    this.isSlatSizesDirty = true;\n  }; // Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n\n\n  TimeGrid.prototype.renderSlatRowHtml = function (dateProfile) {\n    var _a = this,\n        dateEnv = _a.dateEnv,\n        theme = _a.theme,\n        isRtl = _a.isRtl;\n\n    var html = '';\n    var dayStart = startOfDay(dateProfile.renderRange.start);\n    var slotTime = dateProfile.minTime;\n    var slotIterator = createDuration(0);\n    var slotDate; // will be on the view's first day, but we only care about its time\n\n    var isLabeled;\n    var axisHtml; // Calculate the time for each slot\n\n    while (asRoughMs(slotTime) < asRoughMs(dateProfile.maxTime)) {\n      slotDate = dateEnv.add(dayStart, slotTime);\n      isLabeled = wholeDivideDurations(slotIterator, this.labelInterval) !== null;\n      axisHtml = '<td class=\"fc-axis fc-time ' + theme.getClass('widgetContent') + '\">' + (isLabeled ? '<span>' + // for matchCellWidths\n      htmlEscape(dateEnv.format(slotDate, this.labelFormat)) + '</span>' : '') + '</td>';\n      html += '<tr data-time=\"' + formatIsoTimeString(slotDate) + '\"' + (isLabeled ? '' : ' class=\"fc-minor\"') + '>' + (!isRtl ? axisHtml : '') + '<td class=\"' + theme.getClass('widgetContent') + '\"></td>' + (isRtl ? axisHtml : '') + '</tr>';\n      slotTime = addDurations(slotTime, this.slotDuration);\n      slotIterator = addDurations(slotIterator, this.slotDuration);\n    }\n\n    return html;\n  };\n\n  TimeGrid.prototype._renderColumns = function (cells, dateProfile) {\n    var _a = this,\n        theme = _a.theme,\n        dateEnv = _a.dateEnv,\n        view = _a.view;\n\n    var bgRow = new DayBgRow(this.context);\n    this.rootBgContainerEl.innerHTML = '<table class=\"' + theme.getClass('tableGrid') + '\">' + bgRow.renderHtml({\n      cells: cells,\n      dateProfile: dateProfile,\n      renderIntroHtml: this.renderProps.renderBgIntroHtml\n    }) + '</table>';\n    this.colEls = findElements(this.el, '.fc-day, .fc-disabled-day');\n\n    for (var col = 0; col < this.colCnt; col++) {\n      this.publiclyTrigger('dayRender', [{\n        date: dateEnv.toDate(cells[col].date),\n        el: this.colEls[col],\n        view: view\n      }]);\n    }\n\n    if (this.isRtl) {\n      this.colEls.reverse();\n    }\n\n    this.colPositions = new PositionCache(this.el, this.colEls, true, // horizontal\n    false);\n    this.renderContentSkeleton();\n    this.isColSizesDirty = true;\n  };\n\n  TimeGrid.prototype._unrenderColumns = function () {\n    this.unrenderContentSkeleton();\n  };\n  /* Content Skeleton\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Renders the DOM that the view's content will live in\n\n\n  TimeGrid.prototype.renderContentSkeleton = function () {\n    var parts = [];\n    var skeletonEl;\n    parts.push(this.renderProps.renderIntroHtml());\n\n    for (var i = 0; i < this.colCnt; i++) {\n      parts.push('<td>' + '<div class=\"fc-content-col\">' + '<div class=\"fc-event-container fc-mirror-container\"></div>' + '<div class=\"fc-event-container\"></div>' + '<div class=\"fc-highlight-container\"></div>' + '<div class=\"fc-bgevent-container\"></div>' + '<div class=\"fc-business-container\"></div>' + '</div>' + '</td>');\n    }\n\n    if (this.isRtl) {\n      parts.reverse();\n    }\n\n    skeletonEl = this.contentSkeletonEl = htmlToElement('<div class=\"fc-content-skeleton\">' + '<table>' + '<tr>' + parts.join('') + '</tr>' + '</table>' + '</div>');\n    this.colContainerEls = findElements(skeletonEl, '.fc-content-col');\n    this.mirrorContainerEls = findElements(skeletonEl, '.fc-mirror-container');\n    this.fgContainerEls = findElements(skeletonEl, '.fc-event-container:not(.fc-mirror-container)');\n    this.bgContainerEls = findElements(skeletonEl, '.fc-bgevent-container');\n    this.highlightContainerEls = findElements(skeletonEl, '.fc-highlight-container');\n    this.businessContainerEls = findElements(skeletonEl, '.fc-business-container');\n\n    if (this.isRtl) {\n      this.colContainerEls.reverse();\n      this.mirrorContainerEls.reverse();\n      this.fgContainerEls.reverse();\n      this.bgContainerEls.reverse();\n      this.highlightContainerEls.reverse();\n      this.businessContainerEls.reverse();\n    }\n\n    this.el.appendChild(skeletonEl);\n  };\n\n  TimeGrid.prototype.unrenderContentSkeleton = function () {\n    removeElement(this.contentSkeletonEl);\n  }; // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col\n\n\n  TimeGrid.prototype.groupSegsByCol = function (segs) {\n    var segsByCol = [];\n    var i;\n\n    for (i = 0; i < this.colCnt; i++) {\n      segsByCol.push([]);\n    }\n\n    for (i = 0; i < segs.length; i++) {\n      segsByCol[segs[i].col].push(segs[i]);\n    }\n\n    return segsByCol;\n  }; // Given segments grouped by column, insert the segments' elements into a parallel array of container\n  // elements, each living within a column.\n\n\n  TimeGrid.prototype.attachSegsByCol = function (segsByCol, containerEls) {\n    var col;\n    var segs;\n    var i;\n\n    for (col = 0; col < this.colCnt; col++) {\n      // iterate each column grouping\n      segs = segsByCol[col];\n\n      for (i = 0; i < segs.length; i++) {\n        containerEls[col].appendChild(segs[i].el);\n      }\n    }\n  };\n  /* Now Indicator\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype.getNowIndicatorUnit = function () {\n    return 'minute'; // will refresh on the minute\n  };\n\n  TimeGrid.prototype.renderNowIndicator = function (segs, date) {\n    // HACK: if date columns not ready for some reason (scheduler)\n    if (!this.colContainerEls) {\n      return;\n    }\n\n    var top = this.computeDateTop(date);\n    var nodes = [];\n    var i; // render lines within the columns\n\n    for (i = 0; i < segs.length; i++) {\n      var lineEl = createElement('div', {\n        className: 'fc-now-indicator fc-now-indicator-line'\n      });\n      lineEl.style.top = top + 'px';\n      this.colContainerEls[segs[i].col].appendChild(lineEl);\n      nodes.push(lineEl);\n    } // render an arrow over the axis\n\n\n    if (segs.length > 0) {\n      // is the current time in view?\n      var arrowEl = createElement('div', {\n        className: 'fc-now-indicator fc-now-indicator-arrow'\n      });\n      arrowEl.style.top = top + 'px';\n      this.contentSkeletonEl.appendChild(arrowEl);\n      nodes.push(arrowEl);\n    }\n\n    this.nowIndicatorEls = nodes;\n  };\n\n  TimeGrid.prototype.unrenderNowIndicator = function () {\n    if (this.nowIndicatorEls) {\n      this.nowIndicatorEls.forEach(removeElement);\n      this.nowIndicatorEls = null;\n    }\n  };\n  /* Coordinates\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype.getTotalSlatHeight = function () {\n    return this.slatContainerEl.getBoundingClientRect().height;\n  }; // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n\n\n  TimeGrid.prototype.computeDateTop = function (when, startOfDayDate) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when);\n    }\n\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()));\n  }; // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n\n\n  TimeGrid.prototype.computeTimeTop = function (duration) {\n    var len = this.slatEls.length;\n    var dateProfile = this.props.dateProfile;\n    var slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.minTime)) / asRoughMs(this.slotDuration); // floating-point value of # of slots covered\n\n    var slatIndex;\n    var slatRemainder; // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because minTime/maxTime might be customized.\n\n    slatCoverage = Math.max(0, slatCoverage);\n    slatCoverage = Math.min(len, slatCoverage); // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n\n    slatIndex = Math.floor(slatCoverage);\n    slatIndex = Math.min(slatIndex, len - 1); // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n\n    slatRemainder = slatCoverage - slatIndex;\n    return this.slatPositions.tops[slatIndex] + this.slatPositions.getHeight(slatIndex) * slatRemainder;\n  }; // For each segment in an array, computes and assigns its top and bottom properties\n\n\n  TimeGrid.prototype.computeSegVerticals = function (segs) {\n    var eventMinHeight = this.opt('timeGridEventMinHeight');\n    var i;\n    var seg;\n    var dayDate;\n\n    for (i = 0; i < segs.length; i++) {\n      seg = segs[i];\n      dayDate = this.props.cells[seg.col].date;\n      seg.top = this.computeDateTop(seg.start, dayDate);\n      seg.bottom = Math.max(seg.top + eventMinHeight, this.computeDateTop(seg.end, dayDate));\n    }\n  }; // Given segments that already have their top/bottom properties computed, applies those values to\n  // the segments' elements.\n\n\n  TimeGrid.prototype.assignSegVerticals = function (segs) {\n    var i;\n    var seg;\n\n    for (i = 0; i < segs.length; i++) {\n      seg = segs[i];\n      applyStyle(seg.el, this.generateSegVerticalCss(seg));\n    }\n  }; // Generates an object with CSS properties for the top/bottom coordinates of a segment element\n\n\n  TimeGrid.prototype.generateSegVerticalCss = function (seg) {\n    return {\n      top: seg.top,\n      bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container\n\n    };\n  };\n  /* Sizing\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype.buildPositionCaches = function () {\n    this.buildColPositions();\n    this.buildSlatPositions();\n  };\n\n  TimeGrid.prototype.buildColPositions = function () {\n    this.colPositions.build();\n  };\n\n  TimeGrid.prototype.buildSlatPositions = function () {\n    this.slatPositions.build();\n  };\n  /* Hit System\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype.positionToHit = function (positionLeft, positionTop) {\n    var _a = this,\n        dateEnv = _a.dateEnv,\n        snapsPerSlot = _a.snapsPerSlot,\n        slatPositions = _a.slatPositions,\n        colPositions = _a.colPositions;\n\n    var colIndex = colPositions.leftToIndex(positionLeft);\n    var slatIndex = slatPositions.topToIndex(positionTop);\n\n    if (colIndex != null && slatIndex != null) {\n      var slatTop = slatPositions.tops[slatIndex];\n      var slatHeight = slatPositions.getHeight(slatIndex);\n      var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n\n      var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n\n      var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n      var dayDate = this.props.cells[colIndex].date;\n      var time = addDurations(this.props.dateProfile.minTime, multiplyDuration(this.snapDuration, snapIndex));\n      var start = dateEnv.add(dayDate, time);\n      var end = dateEnv.add(start, this.snapDuration);\n      return {\n        col: colIndex,\n        dateSpan: {\n          range: {\n            start: start,\n            end: end\n          },\n          allDay: false\n        },\n        dayEl: this.colEls[colIndex],\n        relativeRect: {\n          left: colPositions.lefts[colIndex],\n          right: colPositions.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight\n        }\n      };\n    }\n  };\n  /* Event Drag Visualization\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype._renderEventDrag = function (state) {\n    if (state) {\n      this.eventRenderer.hideByHash(state.affectedInstances);\n\n      if (state.isEvent) {\n        this.mirrorRenderer.renderSegs(state.segs, {\n          isDragging: true,\n          sourceSeg: state.sourceSeg\n        });\n      } else {\n        this.fillRenderer.renderSegs('highlight', state.segs);\n      }\n    }\n  };\n\n  TimeGrid.prototype._unrenderEventDrag = function (state) {\n    if (state) {\n      this.eventRenderer.showByHash(state.affectedInstances);\n      this.mirrorRenderer.unrender(state.segs, {\n        isDragging: true,\n        sourceSeg: state.sourceSeg\n      });\n      this.fillRenderer.unrender('highlight');\n    }\n  };\n  /* Event Resize Visualization\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype._renderEventResize = function (state) {\n    if (state) {\n      this.eventRenderer.hideByHash(state.affectedInstances);\n      this.mirrorRenderer.renderSegs(state.segs, {\n        isResizing: true,\n        sourceSeg: state.sourceSeg\n      });\n    }\n  };\n\n  TimeGrid.prototype._unrenderEventResize = function (state) {\n    if (state) {\n      this.eventRenderer.showByHash(state.affectedInstances);\n      this.mirrorRenderer.unrender(state.segs, {\n        isResizing: true,\n        sourceSeg: state.sourceSeg\n      });\n    }\n  };\n  /* Selection\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.\n\n\n  TimeGrid.prototype._renderDateSelection = function (segs) {\n    if (segs) {\n      if (this.opt('selectMirror')) {\n        this.mirrorRenderer.renderSegs(segs, {\n          isSelecting: true\n        });\n      } else {\n        this.fillRenderer.renderSegs('highlight', segs);\n      }\n    }\n  };\n\n  TimeGrid.prototype._unrenderDateSelection = function (segs) {\n    this.mirrorRenderer.unrender(segs, {\n      isSelecting: true\n    });\n    this.fillRenderer.unrender('highlight');\n  };\n\n  return TimeGrid;\n}(DateComponent);\n\nvar AllDaySplitter =\n/** @class */\nfunction (_super) {\n  __extends(AllDaySplitter, _super);\n\n  function AllDaySplitter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AllDaySplitter.prototype.getKeyInfo = function () {\n    return {\n      allDay: {},\n      timed: {}\n    };\n  };\n\n  AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n    if (dateSpan.allDay) {\n      return ['allDay'];\n    } else {\n      return ['timed'];\n    }\n  };\n\n  AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {\n    if (!eventDef.allDay) {\n      return ['timed'];\n    } else if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay'];\n    } else {\n      return ['allDay'];\n    }\n  };\n\n  return AllDaySplitter;\n}(Splitter);\n\nvar TIMEGRID_ALL_DAY_EVENT_LIMIT = 5;\nvar WEEK_HEADER_FORMAT = createFormatter({\n  week: 'short'\n});\n/* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n// Responsible for managing width/height.\n\nvar TimeGridView =\n/** @class */\nfunction (_super) {\n  __extends(TimeGridView, _super);\n\n  function TimeGridView(context, viewSpec, dateProfileGenerator, parentEl) {\n    var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;\n\n    _this.splitter = new AllDaySplitter();\n    /* Header Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Generates the HTML that will go before the day-of week header cells\n\n    _this.renderHeadIntroHtml = function () {\n      var _a = _this,\n          theme = _a.theme,\n          dateEnv = _a.dateEnv;\n      var range = _this.props.dateProfile.renderRange;\n      var dayCnt = diffDays(range.start, range.end);\n      var weekText;\n\n      if (_this.opt('weekNumbers')) {\n        weekText = dateEnv.format(range.start, WEEK_HEADER_FORMAT);\n        return '' + '<th class=\"fc-axis fc-week-number ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '>' + buildGotoAnchorHtml( // aside from link, important for matchCellWidths\n        _this, {\n          date: range.start,\n          type: 'week',\n          forceOff: dayCnt > 1\n        }, htmlEscape(weekText) // inner HTML\n        ) + '</th>';\n      } else {\n        return '<th class=\"fc-axis ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '></th>';\n      }\n    };\n    /* Time Grid Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.\n\n\n    _this.renderTimeGridBgIntroHtml = function () {\n      var theme = _this.theme;\n      return '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '></td>';\n    }; // Generates the HTML that goes before all other types of cells.\n    // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n\n\n    _this.renderTimeGridIntroHtml = function () {\n      return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n    };\n    /* Day Grid Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Generates the HTML that goes before the all-day cells\n\n\n    _this.renderDayGridBgIntroHtml = function () {\n      var theme = _this.theme;\n      return '' + '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '>' + '<span>' + // needed for matchCellWidths\n      getAllDayHtml(_this) + '</span>' + '</td>';\n    }; // Generates the HTML that goes before all other types of cells.\n    // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n\n\n    _this.renderDayGridIntroHtml = function () {\n      return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n    };\n\n    _this.el.classList.add('fc-timeGrid-view');\n\n    _this.el.innerHTML = _this.renderSkeletonHtml();\n    _this.scroller = new ScrollComponent('hidden', // overflow x\n    'auto' // overflow y\n    );\n    var timeGridWrapEl = _this.scroller.el;\n\n    _this.el.querySelector('.fc-body > tr > td').appendChild(timeGridWrapEl);\n\n    timeGridWrapEl.classList.add('fc-time-grid-container');\n    var timeGridEl = createElement('div', {\n      className: 'fc-time-grid'\n    });\n    timeGridWrapEl.appendChild(timeGridEl);\n    _this.timeGrid = new TimeGrid(_this.context, timeGridEl, {\n      renderBgIntroHtml: _this.renderTimeGridBgIntroHtml,\n      renderIntroHtml: _this.renderTimeGridIntroHtml\n    });\n\n    if (_this.opt('allDaySlot')) {\n      // should we display the \"all-day\" area?\n      _this.dayGrid = new DayGrid( // the all-day subcomponent of this view\n      _this.context, _this.el.querySelector('.fc-day-grid'), {\n        renderNumberIntroHtml: _this.renderDayGridIntroHtml,\n        renderBgIntroHtml: _this.renderDayGridBgIntroHtml,\n        renderIntroHtml: _this.renderDayGridIntroHtml,\n        colWeekNumbersVisible: false,\n        cellWeekNumbersVisible: false\n      }); // have the day-grid extend it's coordinate area over the <hr> dividing the two grids\n\n      var dividerEl = _this.el.querySelector('.fc-divider');\n\n      _this.dayGrid.bottomCoordPadding = dividerEl.getBoundingClientRect().height;\n    }\n\n    return _this;\n  }\n\n  TimeGridView.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.timeGrid.destroy();\n\n    if (this.dayGrid) {\n      this.dayGrid.destroy();\n    }\n\n    this.scroller.destroy();\n  };\n  /* Rendering\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Builds the HTML skeleton for the view.\n  // The day-grid and time-grid components will render inside containers defined by this HTML.\n\n\n  TimeGridView.prototype.renderSkeletonHtml = function () {\n    var theme = this.theme;\n    return '' + '<table class=\"' + theme.getClass('tableGrid') + '\">' + (this.opt('columnHeader') ? '<thead class=\"fc-head\">' + '<tr>' + '<td class=\"fc-head-container ' + theme.getClass('widgetHeader') + '\">&nbsp;</td>' + '</tr>' + '</thead>' : '') + '<tbody class=\"fc-body\">' + '<tr>' + '<td class=\"' + theme.getClass('widgetContent') + '\">' + (this.opt('allDaySlot') ? '<div class=\"fc-day-grid\"></div>' + '<hr class=\"fc-divider ' + theme.getClass('widgetHeader') + '\" />' : '') + '</td>' + '</tr>' + '</tbody>' + '</table>';\n  };\n  /* Now Indicator\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGridView.prototype.getNowIndicatorUnit = function () {\n    return this.timeGrid.getNowIndicatorUnit();\n  }; // subclasses should implement\n  // renderNowIndicator(date: DateMarker) {\n  // }\n\n\n  TimeGridView.prototype.unrenderNowIndicator = function () {\n    this.timeGrid.unrenderNowIndicator();\n  };\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n    _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first\n\n\n    this.timeGrid.updateSize(isResize);\n\n    if (this.dayGrid) {\n      this.dayGrid.updateSize(isResize);\n    }\n  }; // Adjusts the vertical dimensions of the view to the specified values\n\n\n  TimeGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n    var _this = this;\n\n    var eventLimit;\n    var scrollerHeight;\n    var scrollbarWidths; // make all axis cells line up\n\n    this.axisWidth = matchCellWidths(findElements(this.el, '.fc-axis')); // hack to give the view some height prior to timeGrid's columns being rendered\n    // TODO: separate setting height from scroller VS timeGrid.\n\n    if (!this.timeGrid.colEls) {\n      if (!isAuto) {\n        scrollerHeight = this.computeScrollerHeight(viewHeight);\n        this.scroller.setHeight(scrollerHeight);\n      }\n\n      return;\n    } // set of fake row elements that must compensate when scroller has scrollbars\n\n\n    var noScrollRowEls = findElements(this.el, '.fc-row').filter(function (node) {\n      return !_this.scroller.el.contains(node);\n    }); // reset all dimensions back to the original state\n\n    this.timeGrid.bottomRuleEl.style.display = 'none'; // will be shown later if this <hr> is necessary\n\n    this.scroller.clear(); // sets height to 'auto' and clears overflow\n\n    noScrollRowEls.forEach(uncompensateScroll); // limit number of events in the all-day area\n\n    if (this.dayGrid) {\n      this.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n\n      eventLimit = this.opt('eventLimit');\n\n      if (eventLimit && typeof eventLimit !== 'number') {\n        eventLimit = TIMEGRID_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number\n      }\n\n      if (eventLimit) {\n        this.dayGrid.limitRows(eventLimit);\n      }\n    }\n\n    if (!isAuto) {\n      // should we force dimensions of the scroll container?\n      scrollerHeight = this.computeScrollerHeight(viewHeight);\n      this.scroller.setHeight(scrollerHeight);\n      scrollbarWidths = this.scroller.getScrollbarWidths();\n\n      if (scrollbarWidths.left || scrollbarWidths.right) {\n        // using scrollbars?\n        // make the all-day and header rows lines up\n        noScrollRowEls.forEach(function (rowEl) {\n          compensateScroll(rowEl, scrollbarWidths);\n        }); // the scrollbar compensation might have changed text flow, which might affect height, so recalculate\n        // and reapply the desired height to the scroller.\n\n        scrollerHeight = this.computeScrollerHeight(viewHeight);\n        this.scroller.setHeight(scrollerHeight);\n      } // guarantees the same scrollbar widths\n\n\n      this.scroller.lockOverflow(scrollbarWidths); // if there's any space below the slats, show the horizontal rule.\n      // this won't cause any new overflow, because lockOverflow already called.\n\n      if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {\n        this.timeGrid.bottomRuleEl.style.display = '';\n      }\n    }\n  }; // given a desired total height of the view, returns what the height of the scroller should be\n\n\n  TimeGridView.prototype.computeScrollerHeight = function (viewHeight) {\n    return viewHeight - subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n  };\n  /* Scroll\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Computes the initial pre-configured scroll state prior to allowing the user to change it\n\n\n  TimeGridView.prototype.computeDateScroll = function (duration) {\n    var top = this.timeGrid.computeTimeTop(duration); // zoom can give weird floating-point values. rather scroll a little bit further\n\n    top = Math.ceil(top);\n\n    if (top) {\n      top++; // to overcome top border that slots beyond the first have. looks better\n    }\n\n    return {\n      top: top\n    };\n  };\n\n  TimeGridView.prototype.queryDateScroll = function () {\n    return {\n      top: this.scroller.getScrollTop()\n    };\n  };\n\n  TimeGridView.prototype.applyDateScroll = function (scroll) {\n    if (scroll.top !== undefined) {\n      this.scroller.setScrollTop(scroll.top);\n    }\n  }; // Generates an HTML attribute string for setting the width of the axis, if it is known\n\n\n  TimeGridView.prototype.axisStyleAttr = function () {\n    if (this.axisWidth != null) {\n      return 'style=\"width:' + this.axisWidth + 'px\"';\n    }\n\n    return '';\n  };\n\n  return TimeGridView;\n}(View);\n\nTimeGridView.prototype.usesMinMaxTime = true; // indicates that minTime/maxTime affects rendering\n\nvar SimpleTimeGrid =\n/** @class */\nfunction (_super) {\n  __extends(SimpleTimeGrid, _super);\n\n  function SimpleTimeGrid(context, timeGrid) {\n    var _this = _super.call(this, context, timeGrid.el) || this;\n\n    _this.buildDayRanges = memoize(buildDayRanges);\n    _this.slicer = new TimeGridSlicer();\n    _this.timeGrid = timeGrid;\n    context.calendar.registerInteractiveComponent(_this, {\n      el: _this.timeGrid.el\n    });\n    return _this;\n  }\n\n  SimpleTimeGrid.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.calendar.unregisterInteractiveComponent(this);\n  };\n\n  SimpleTimeGrid.prototype.render = function (props) {\n    var dateProfile = props.dateProfile,\n        dayTable = props.dayTable;\n    var dayRanges = this.dayRanges = this.buildDayRanges(dayTable, dateProfile, this.dateEnv);\n    this.timeGrid.receiveProps(__assign({}, this.slicer.sliceProps(props, dateProfile, null, this.timeGrid, dayRanges), {\n      dateProfile: dateProfile,\n      cells: dayTable.cells[0]\n    }));\n  };\n\n  SimpleTimeGrid.prototype.renderNowIndicator = function (date) {\n    this.timeGrid.renderNowIndicator(this.slicer.sliceNowDate(date, this.timeGrid, this.dayRanges), date);\n  };\n\n  SimpleTimeGrid.prototype.buildPositionCaches = function () {\n    this.timeGrid.buildPositionCaches();\n  };\n\n  SimpleTimeGrid.prototype.queryHit = function (positionLeft, positionTop) {\n    var rawHit = this.timeGrid.positionToHit(positionLeft, positionTop);\n\n    if (rawHit) {\n      return {\n        component: this.timeGrid,\n        dateSpan: rawHit.dateSpan,\n        dayEl: rawHit.dayEl,\n        rect: {\n          left: rawHit.relativeRect.left,\n          right: rawHit.relativeRect.right,\n          top: rawHit.relativeRect.top,\n          bottom: rawHit.relativeRect.bottom\n        },\n        layer: 0\n      };\n    }\n  };\n\n  return SimpleTimeGrid;\n}(DateComponent);\n\nfunction buildDayRanges(dayTable, dateProfile, dateEnv) {\n  var ranges = [];\n\n  for (var _i = 0, _a = dayTable.headerDates; _i < _a.length; _i++) {\n    var date = _a[_i];\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.minTime),\n      end: dateEnv.add(date, dateProfile.maxTime)\n    });\n  }\n\n  return ranges;\n}\n\nvar TimeGridSlicer =\n/** @class */\nfunction (_super) {\n  __extends(TimeGridSlicer, _super);\n\n  function TimeGridSlicer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeGridSlicer.prototype.sliceRange = function (range, dayRanges) {\n    var segs = [];\n\n    for (var col = 0; col < dayRanges.length; col++) {\n      var segRange = intersectRanges(range, dayRanges[col]);\n\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col: col\n        });\n      }\n    }\n\n    return segs;\n  };\n\n  return TimeGridSlicer;\n}(Slicer);\n\nvar TimeGridView$1 =\n/** @class */\nfunction (_super) {\n  __extends(TimeGridView, _super);\n\n  function TimeGridView(_context, viewSpec, dateProfileGenerator, parentEl) {\n    var _this = _super.call(this, _context, viewSpec, dateProfileGenerator, parentEl) || this;\n\n    _this.buildDayTable = memoize(buildDayTable);\n\n    if (_this.opt('columnHeader')) {\n      _this.header = new DayHeader(_this.context, _this.el.querySelector('.fc-head-container'));\n    }\n\n    _this.simpleTimeGrid = new SimpleTimeGrid(_this.context, _this.timeGrid);\n\n    if (_this.dayGrid) {\n      _this.simpleDayGrid = new SimpleDayGrid(_this.context, _this.dayGrid);\n    }\n\n    return _this;\n  }\n\n  TimeGridView.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    if (this.header) {\n      this.header.destroy();\n    }\n\n    this.simpleTimeGrid.destroy();\n\n    if (this.simpleDayGrid) {\n      this.simpleDayGrid.destroy();\n    }\n  };\n\n  TimeGridView.prototype.render = function (props) {\n    _super.prototype.render.call(this, props); // for flags for updateSize\n\n\n    var dateProfile = this.props.dateProfile;\n    var dayTable = this.buildDayTable(dateProfile, this.dateProfileGenerator);\n    var splitProps = this.splitter.splitProps(props);\n\n    if (this.header) {\n      this.header.receiveProps({\n        dateProfile: dateProfile,\n        dates: dayTable.headerDates,\n        datesRepDistinctDays: true,\n        renderIntroHtml: this.renderHeadIntroHtml\n      });\n    }\n\n    this.simpleTimeGrid.receiveProps(__assign({}, splitProps['timed'], {\n      dateProfile: dateProfile,\n      dayTable: dayTable\n    }));\n\n    if (this.simpleDayGrid) {\n      this.simpleDayGrid.receiveProps(__assign({}, splitProps['allDay'], {\n        dateProfile: dateProfile,\n        dayTable: dayTable,\n        nextDayThreshold: this.nextDayThreshold,\n        isRigid: false\n      }));\n    }\n  };\n\n  TimeGridView.prototype.renderNowIndicator = function (date) {\n    this.simpleTimeGrid.renderNowIndicator(date);\n  };\n\n  return TimeGridView;\n}(TimeGridView);\n\nfunction buildDayTable(dateProfile, dateProfileGenerator) {\n  var daySeries = new DaySeries(dateProfile.renderRange, dateProfileGenerator);\n  return new DayTable(daySeries, false);\n}\n\nvar main = createPlugin({\n  defaultView: 'timeGridWeek',\n  views: {\n    timeGrid: {\n      class: TimeGridView$1,\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true // a bad name. confused with overlap/constraint system\n\n    },\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: {\n        days: 1\n      }\n    },\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: {\n        weeks: 1\n      }\n    }\n  }\n});\nexport default main;\nexport { TimeGridView as AbstractTimeGridView, TimeGrid, TimeGridSlicer, TimeGridView$1 as TimeGridView, buildDayRanges, buildDayTable };","map":{"version":3,"sources":["/Users/sanjidanawrin/n3/node_modules/@fullcalendar/timegrid/main.esm.js"],"names":["createFormatter","removeElement","cssToStr","isMultiDayRange","htmlEscape","compareByFieldSpecs","applyStyle","FgEventRenderer","buildSegCompareObj","FillRenderer","memoizeRendering","createDuration","wholeDivideDurations","findElements","PositionCache","startOfDay","asRoughMs","formatIsoTimeString","addDurations","htmlToElement","createElement","multiplyDuration","DateComponent","hasBgRendering","Splitter","diffDays","buildGotoAnchorHtml","getAllDayHtml","ScrollComponent","matchCellWidths","uncompensateScroll","compensateScroll","subtractInnerElHeight","View","memoize","intersectRanges","Slicer","DayHeader","DaySeries","DayTable","createPlugin","DayBgRow","DayGrid","SimpleDayGrid","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","TimeGridEventRenderer","_super","timeGrid","_this","context","fullTimeFormat","hour","minute","separator","options","defaultRangeSeparator","attachSegs","segs","mirrorInfo","segsByCol","groupSegsByCol","col","sortEventSegs","attachSegsByCol","fgContainerEls","detachSegs","forEach","seg","el","computeSegSizes","allSegs","_a","colCnt","computeSegVerticals","computeSegHorizontals","assignSegSizes","assignSegVerticals","assignSegCss","computeEventTimeFormat","meridiem","computeDisplayEventEnd","renderSegHtml","view","eventRange","eventDef","def","eventUi","ui","allDay","isDraggable","computeEventDraggable","isResizableFromStart","isStart","computeEventStartResizable","isResizableFromEnd","isEnd","computeEventEndResizable","classes","getSegClasses","skinCss","getSkinCss","timeText","fullTimeText","startTimeText","unshift","range","unzonedStart","start","unzonedEnd","end","_getTimeText","getTimeText","join","url","title","levels","level0","buildSlotSegLevels","computeForwardSlotSegs","computeSlotSegPressures","computeSegForwardBack","seriesBackwardPressure","seriesBackwardCoord","forwardSegs","forwardCoord","undefined","sortForwardSegs","backwardCoord","objs","map","buildTimeGridSegCompareObj","specs","field","order","concat","eventOrderSpecs","sort","obj0","obj1","c","_seg","_i","segs_1","generateSegCss","level","classList","add","bottom","top","shouldOverlap","slotEventOverlap","props","generateSegVerticalCss","isRtl","left","right","Math","min","zIndex","forwardPressure","j","computeSlotSegCollisions","push","k","forwardSeg","max","otherSegs","results","isSlotSegCollision","seg1","seg2","obj","TimeGridMirrorRenderer","mirrorContainerEls","sourceSeg","sourceSegProps","marginLeft","marginRight","TimeGridFillRenderer","type","containerEls","bgContainerEls","businessContainerEls","highlightContainerEls","AGENDA_STOCK_SUB_DURATIONS","hours","minutes","seconds","TimeGrid","renderProps","isSlatSizesDirty","isColSizesDirty","renderSlats","_renderSlats","eventRenderer","fillRenderer","mirrorRenderer","renderColumns","_renderColumns","_unrenderColumns","renderBusinessHours","renderSegs","bind","unrender","renderDateSelection","_renderDateSelection","_unrenderDateSelection","renderFgEvents","renderBgEvents","renderEventSelection","selectByInstanceId","unselectByInstanceId","renderEventDrag","_renderEventDrag","_unrenderEventDrag","renderEventResize","_renderEventResize","_unrenderEventResize","processOptions","innerHTML","theme","getClass","rootBgContainerEl","querySelector","slatContainerEl","bottomRuleEl","slotDuration","opt","snapDuration","snapsPerSlot","input","isArray","labelFormat","omitZeroMinute","labelInterval","computeLabelInterval","slotsPerLabel","render","cells","dateProfile","businessHourSegs","dateSelectionSegs","fgEventSegs","bgEventSegs","eventSelection","eventDrag","eventResize","destroy","updateSize","isResize","buildSlatPositions","buildColPositions","computeSizes","assignSizes","renderSlatRowHtml","slatEls","slatPositions","dateEnv","html","dayStart","renderRange","slotTime","minTime","slotIterator","slotDate","isLabeled","axisHtml","maxTime","format","bgRow","renderHtml","renderIntroHtml","renderBgIntroHtml","colEls","publiclyTrigger","date","toDate","reverse","colPositions","renderContentSkeleton","unrenderContentSkeleton","parts","skeletonEl","contentSkeletonEl","colContainerEls","appendChild","getNowIndicatorUnit","renderNowIndicator","computeDateTop","nodes","lineEl","className","style","arrowEl","nowIndicatorEls","unrenderNowIndicator","getTotalSlatHeight","getBoundingClientRect","height","when","startOfDayDate","computeTimeTop","valueOf","duration","len","slatCoverage","milliseconds","slatIndex","slatRemainder","floor","tops","getHeight","eventMinHeight","dayDate","buildPositionCaches","build","positionToHit","positionLeft","positionTop","colIndex","leftToIndex","topToIndex","slatTop","slatHeight","partial","localSnapIndex","snapIndex","time","dateSpan","dayEl","relativeRect","lefts","rights","state","hideByHash","affectedInstances","isEvent","isDragging","showByHash","isResizing","isSelecting","AllDaySplitter","getKeyInfo","timed","getKeysForDateSpan","getKeysForEventDef","TIMEGRID_ALL_DAY_EVENT_LIMIT","WEEK_HEADER_FORMAT","week","TimeGridView","viewSpec","dateProfileGenerator","parentEl","splitter","renderHeadIntroHtml","dayCnt","weekText","axisStyleAttr","forceOff","renderTimeGridBgIntroHtml","renderTimeGridIntroHtml","renderDayGridBgIntroHtml","renderDayGridIntroHtml","renderSkeletonHtml","scroller","timeGridWrapEl","timeGridEl","dayGrid","renderNumberIntroHtml","colWeekNumbersVisible","cellWeekNumbersVisible","dividerEl","bottomCoordPadding","viewHeight","isAuto","updateBaseSize","eventLimit","scrollerHeight","scrollbarWidths","axisWidth","computeScrollerHeight","setHeight","noScrollRowEls","filter","node","contains","display","clear","removeSegPopover","limitRows","getScrollbarWidths","rowEl","lockOverflow","computeDateScroll","ceil","queryDateScroll","getScrollTop","applyDateScroll","scroll","setScrollTop","usesMinMaxTime","SimpleTimeGrid","buildDayRanges","slicer","TimeGridSlicer","calendar","registerInteractiveComponent","unregisterInteractiveComponent","dayTable","dayRanges","receiveProps","sliceProps","sliceNowDate","queryHit","rawHit","component","rect","layer","ranges","headerDates","sliceRange","segRange","TimeGridView$1","_context","buildDayTable","header","simpleTimeGrid","simpleDayGrid","splitProps","dates","datesRepDistinctDays","nextDayThreshold","isRigid","daySeries","main","defaultView","views","class","allDaySlot","timeGridDay","days","timeGridWeek","weeks","AbstractTimeGridView"],"mappings":"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","sourcesContent":["/*!\nFullCalendar Time Grid Plugin v4.3.0\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\nimport { createFormatter, removeElement, cssToStr, isMultiDayRange, htmlEscape, compareByFieldSpecs, applyStyle, FgEventRenderer, buildSegCompareObj, FillRenderer, memoizeRendering, createDuration, wholeDivideDurations, findElements, PositionCache, startOfDay, asRoughMs, formatIsoTimeString, addDurations, htmlToElement, createElement, multiplyDuration, DateComponent, hasBgRendering, Splitter, diffDays, buildGotoAnchorHtml, getAllDayHtml, ScrollComponent, matchCellWidths, uncompensateScroll, compensateScroll, subtractInnerElHeight, View, memoize, intersectRanges, Slicer, DayHeader, DaySeries, DayTable, createPlugin } from '@fullcalendar/core';\nimport { DayBgRow, DayGrid, SimpleDayGrid } from '@fullcalendar/daygrid';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\n/*\nOnly handles foreground segs.\nDoes not own rendering. Use for low-level util methods by TimeGrid.\n*/\nvar TimeGridEventRenderer = /** @class */ (function (_super) {\n    __extends(TimeGridEventRenderer, _super);\n    function TimeGridEventRenderer(timeGrid) {\n        var _this = _super.call(this, timeGrid.context) || this;\n        _this.timeGrid = timeGrid;\n        _this.fullTimeFormat = createFormatter({\n            hour: 'numeric',\n            minute: '2-digit',\n            separator: _this.context.options.defaultRangeSeparator\n        });\n        return _this;\n    }\n    // Given an array of foreground segments, render a DOM element for each, computes position,\n    // and attaches to the column inner-container elements.\n    TimeGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n        var segsByCol = this.timeGrid.groupSegsByCol(segs);\n        // order the segs within each column\n        // TODO: have groupSegsByCol do this?\n        for (var col = 0; col < segsByCol.length; col++) {\n            segsByCol[col] = this.sortEventSegs(segsByCol[col]);\n        }\n        this.segsByCol = segsByCol;\n        this.timeGrid.attachSegsByCol(segsByCol, this.timeGrid.fgContainerEls);\n    };\n    TimeGridEventRenderer.prototype.detachSegs = function (segs) {\n        segs.forEach(function (seg) {\n            removeElement(seg.el);\n        });\n        this.segsByCol = null;\n    };\n    TimeGridEventRenderer.prototype.computeSegSizes = function (allSegs) {\n        var _a = this, timeGrid = _a.timeGrid, segsByCol = _a.segsByCol;\n        var colCnt = timeGrid.colCnt;\n        timeGrid.computeSegVerticals(allSegs); // horizontals relies on this\n        if (segsByCol) {\n            for (var col = 0; col < colCnt; col++) {\n                this.computeSegHorizontals(segsByCol[col]); // compute horizontal coordinates, z-index's, and reorder the array\n            }\n        }\n    };\n    TimeGridEventRenderer.prototype.assignSegSizes = function (allSegs) {\n        var _a = this, timeGrid = _a.timeGrid, segsByCol = _a.segsByCol;\n        var colCnt = timeGrid.colCnt;\n        timeGrid.assignSegVerticals(allSegs); // horizontals relies on this\n        if (segsByCol) {\n            for (var col = 0; col < colCnt; col++) {\n                this.assignSegCss(segsByCol[col]);\n            }\n        }\n    };\n    // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined\n    TimeGridEventRenderer.prototype.computeEventTimeFormat = function () {\n        return {\n            hour: 'numeric',\n            minute: '2-digit',\n            meridiem: false\n        };\n    };\n    // Computes a default `displayEventEnd` value if one is not expliclty defined\n    TimeGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n        return true;\n    };\n    // Renders the HTML for a single event segment's default rendering\n    TimeGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {\n        var view = this.context.view;\n        var eventRange = seg.eventRange;\n        var eventDef = eventRange.def;\n        var eventUi = eventRange.ui;\n        var allDay = eventDef.allDay;\n        var isDraggable = view.computeEventDraggable(eventDef, eventUi);\n        var isResizableFromStart = seg.isStart && view.computeEventStartResizable(eventDef, eventUi);\n        var isResizableFromEnd = seg.isEnd && view.computeEventEndResizable(eventDef, eventUi);\n        var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);\n        var skinCss = cssToStr(this.getSkinCss(eventUi));\n        var timeText;\n        var fullTimeText; // more verbose time text. for the print stylesheet\n        var startTimeText; // just the start time text\n        classes.unshift('fc-time-grid-event');\n        // if the event appears to span more than one day...\n        if (isMultiDayRange(eventRange.range)) {\n            // Don't display time text on segments that run entirely through a day.\n            // That would appear as midnight-midnight and would look dumb.\n            // Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)\n            if (seg.isStart || seg.isEnd) {\n                var unzonedStart = seg.start;\n                var unzonedEnd = seg.end;\n                timeText = this._getTimeText(unzonedStart, unzonedEnd, allDay); // TODO: give the timezones\n                fullTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, this.fullTimeFormat);\n                startTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, null, false); // displayEnd=false\n            }\n        }\n        else {\n            // Display the normal time text for the *event's* times\n            timeText = this.getTimeText(eventRange);\n            fullTimeText = this.getTimeText(eventRange, this.fullTimeFormat);\n            startTimeText = this.getTimeText(eventRange, null, false); // displayEnd=false\n        }\n        return '<a class=\"' + classes.join(' ') + '\"' +\n            (eventDef.url ?\n                ' href=\"' + htmlEscape(eventDef.url) + '\"' :\n                '') +\n            (skinCss ?\n                ' style=\"' + skinCss + '\"' :\n                '') +\n            '>' +\n            '<div class=\"fc-content\">' +\n            (timeText ?\n                '<div class=\"fc-time\"' +\n                    ' data-start=\"' + htmlEscape(startTimeText) + '\"' +\n                    ' data-full=\"' + htmlEscape(fullTimeText) + '\"' +\n                    '>' +\n                    '<span>' + htmlEscape(timeText) + '</span>' +\n                    '</div>' :\n                '') +\n            (eventDef.title ?\n                '<div class=\"fc-title\">' +\n                    htmlEscape(eventDef.title) +\n                    '</div>' :\n                '') +\n            '</div>' +\n            /* TODO: write CSS for this\n            (isResizableFromStart ?\n              '<div class=\"fc-resizer fc-start-resizer\"></div>' :\n              ''\n              ) +\n            */\n            (isResizableFromEnd ?\n                '<div class=\"fc-resizer fc-end-resizer\"></div>' :\n                '') +\n            '</a>';\n    };\n    // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n    // Assumed the segs are already ordered.\n    // NOTE: Also reorders the given array by date!\n    TimeGridEventRenderer.prototype.computeSegHorizontals = function (segs) {\n        var levels;\n        var level0;\n        var i;\n        levels = buildSlotSegLevels(segs);\n        computeForwardSlotSegs(levels);\n        if ((level0 = levels[0])) {\n            for (i = 0; i < level0.length; i++) {\n                computeSlotSegPressures(level0[i]);\n            }\n            for (i = 0; i < level0.length; i++) {\n                this.computeSegForwardBack(level0[i], 0, 0);\n            }\n        }\n    };\n    // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n    // from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n    // seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n    //\n    // The segment might be part of a \"series\", which means consecutive segments with the same pressure\n    // who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n    // segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n    // coordinate of the first segment in the series.\n    TimeGridEventRenderer.prototype.computeSegForwardBack = function (seg, seriesBackwardPressure, seriesBackwardCoord) {\n        var forwardSegs = seg.forwardSegs;\n        var i;\n        if (seg.forwardCoord === undefined) { // not already computed\n            if (!forwardSegs.length) {\n                // if there are no forward segments, this segment should butt up against the edge\n                seg.forwardCoord = 1;\n            }\n            else {\n                // sort highest pressure first\n                this.sortForwardSegs(forwardSegs);\n                // this segment's forwardCoord will be calculated from the backwardCoord of the\n                // highest-pressure forward segment.\n                this.computeSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);\n                seg.forwardCoord = forwardSegs[0].backwardCoord;\n            }\n            // calculate the backwardCoord from the forwardCoord. consider the series\n            seg.backwardCoord = seg.forwardCoord -\n                (seg.forwardCoord - seriesBackwardCoord) / // available width for series\n                    (seriesBackwardPressure + 1); // # of segments in the series\n            // use this segment's coordinates to computed the coordinates of the less-pressurized\n            // forward segments\n            for (i = 0; i < forwardSegs.length; i++) {\n                this.computeSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);\n            }\n        }\n    };\n    TimeGridEventRenderer.prototype.sortForwardSegs = function (forwardSegs) {\n        var objs = forwardSegs.map(buildTimeGridSegCompareObj);\n        var specs = [\n            // put higher-pressure first\n            { field: 'forwardPressure', order: -1 },\n            // put segments that are closer to initial edge first (and favor ones with no coords yet)\n            { field: 'backwardCoord', order: 1 }\n        ].concat(this.context.view.eventOrderSpecs);\n        objs.sort(function (obj0, obj1) {\n            return compareByFieldSpecs(obj0, obj1, specs);\n        });\n        return objs.map(function (c) {\n            return c._seg;\n        });\n    };\n    // Given foreground event segments that have already had their position coordinates computed,\n    // assigns position-related CSS values to their elements.\n    TimeGridEventRenderer.prototype.assignSegCss = function (segs) {\n        for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n            var seg = segs_1[_i];\n            applyStyle(seg.el, this.generateSegCss(seg));\n            if (seg.level > 0) {\n                seg.el.classList.add('fc-time-grid-event-inset');\n            }\n            // if the event is short that the title will be cut off,\n            // attach a className that condenses the title into the time area.\n            if (seg.eventRange.def.title && seg.bottom - seg.top < 30) {\n                seg.el.classList.add('fc-short'); // TODO: \"condensed\" is a better name\n            }\n        }\n    };\n    // Generates an object with CSS properties/values that should be applied to an event segment element.\n    // Contains important positioning-related properties that should be applied to any event element, customized or not.\n    TimeGridEventRenderer.prototype.generateSegCss = function (seg) {\n        var shouldOverlap = this.context.options.slotEventOverlap;\n        var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point\n        var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point\n        var props = this.timeGrid.generateSegVerticalCss(seg); // get top/bottom first\n        var isRtl = this.timeGrid.isRtl;\n        var left; // amount of space from left edge, a fraction of the total width\n        var right; // amount of space from right edge, a fraction of the total width\n        if (shouldOverlap) {\n            // double the width, but don't go beyond the maximum forward coordinate (1.0)\n            forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);\n        }\n        if (isRtl) {\n            left = 1 - forwardCoord;\n            right = backwardCoord;\n        }\n        else {\n            left = backwardCoord;\n            right = 1 - forwardCoord;\n        }\n        props.zIndex = seg.level + 1; // convert from 0-base to 1-based\n        props.left = left * 100 + '%';\n        props.right = right * 100 + '%';\n        if (shouldOverlap && seg.forwardPressure) {\n            // add padding to the edge so that forward stacked events don't cover the resizer's icon\n            props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n        }\n        return props;\n    };\n    return TimeGridEventRenderer;\n}(FgEventRenderer));\n// Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\nfunction buildSlotSegLevels(segs) {\n    var levels = [];\n    var i;\n    var seg;\n    var j;\n    for (i = 0; i < segs.length; i++) {\n        seg = segs[i];\n        // go through all the levels and stop on the first level where there are no collisions\n        for (j = 0; j < levels.length; j++) {\n            if (!computeSlotSegCollisions(seg, levels[j]).length) {\n                break;\n            }\n        }\n        seg.level = j;\n        (levels[j] || (levels[j] = [])).push(seg);\n    }\n    return levels;\n}\n// For every segment, figure out the other segments that are in subsequent\n// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\nfunction computeForwardSlotSegs(levels) {\n    var i;\n    var level;\n    var j;\n    var seg;\n    var k;\n    for (i = 0; i < levels.length; i++) {\n        level = levels[i];\n        for (j = 0; j < level.length; j++) {\n            seg = level[j];\n            seg.forwardSegs = [];\n            for (k = i + 1; k < levels.length; k++) {\n                computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);\n            }\n        }\n    }\n}\n// Figure out which path forward (via seg.forwardSegs) results in the longest path until\n// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\nfunction computeSlotSegPressures(seg) {\n    var forwardSegs = seg.forwardSegs;\n    var forwardPressure = 0;\n    var i;\n    var forwardSeg;\n    if (seg.forwardPressure === undefined) { // not already computed\n        for (i = 0; i < forwardSegs.length; i++) {\n            forwardSeg = forwardSegs[i];\n            // figure out the child's maximum forward path\n            computeSlotSegPressures(forwardSeg);\n            // either use the existing maximum, or use the child's forward pressure\n            // plus one (for the forwardSeg itself)\n            forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);\n        }\n        seg.forwardPressure = forwardPressure;\n    }\n}\n// Find all the segments in `otherSegs` that vertically collide with `seg`.\n// Append into an optionally-supplied `results` array and return.\nfunction computeSlotSegCollisions(seg, otherSegs, results) {\n    if (results === void 0) { results = []; }\n    for (var i = 0; i < otherSegs.length; i++) {\n        if (isSlotSegCollision(seg, otherSegs[i])) {\n            results.push(otherSegs[i]);\n        }\n    }\n    return results;\n}\n// Do these segments occupy the same vertical space?\nfunction isSlotSegCollision(seg1, seg2) {\n    return seg1.bottom > seg2.top && seg1.top < seg2.bottom;\n}\nfunction buildTimeGridSegCompareObj(seg) {\n    var obj = buildSegCompareObj(seg);\n    obj.forwardPressure = seg.forwardPressure;\n    obj.backwardCoord = seg.backwardCoord;\n    return obj;\n}\n\nvar TimeGridMirrorRenderer = /** @class */ (function (_super) {\n    __extends(TimeGridMirrorRenderer, _super);\n    function TimeGridMirrorRenderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TimeGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n        this.segsByCol = this.timeGrid.groupSegsByCol(segs);\n        this.timeGrid.attachSegsByCol(this.segsByCol, this.timeGrid.mirrorContainerEls);\n        this.sourceSeg = mirrorInfo.sourceSeg;\n    };\n    TimeGridMirrorRenderer.prototype.generateSegCss = function (seg) {\n        var props = _super.prototype.generateSegCss.call(this, seg);\n        var sourceSeg = this.sourceSeg;\n        if (sourceSeg && sourceSeg.col === seg.col) {\n            var sourceSegProps = _super.prototype.generateSegCss.call(this, sourceSeg);\n            props.left = sourceSegProps.left;\n            props.right = sourceSegProps.right;\n            props.marginLeft = sourceSegProps.marginLeft;\n            props.marginRight = sourceSegProps.marginRight;\n        }\n        return props;\n    };\n    return TimeGridMirrorRenderer;\n}(TimeGridEventRenderer));\n\nvar TimeGridFillRenderer = /** @class */ (function (_super) {\n    __extends(TimeGridFillRenderer, _super);\n    function TimeGridFillRenderer(timeGrid) {\n        var _this = _super.call(this, timeGrid.context) || this;\n        _this.timeGrid = timeGrid;\n        return _this;\n    }\n    TimeGridFillRenderer.prototype.attachSegs = function (type, segs) {\n        var timeGrid = this.timeGrid;\n        var containerEls;\n        // TODO: more efficient lookup\n        if (type === 'bgEvent') {\n            containerEls = timeGrid.bgContainerEls;\n        }\n        else if (type === 'businessHours') {\n            containerEls = timeGrid.businessContainerEls;\n        }\n        else if (type === 'highlight') {\n            containerEls = timeGrid.highlightContainerEls;\n        }\n        timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs), containerEls);\n        return segs.map(function (seg) {\n            return seg.el;\n        });\n    };\n    TimeGridFillRenderer.prototype.computeSegSizes = function (segs) {\n        this.timeGrid.computeSegVerticals(segs);\n    };\n    TimeGridFillRenderer.prototype.assignSegSizes = function (segs) {\n        this.timeGrid.assignSegVerticals(segs);\n    };\n    return TimeGridFillRenderer;\n}(FillRenderer));\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nvar AGENDA_STOCK_SUB_DURATIONS = [\n    { hours: 1 },\n    { minutes: 30 },\n    { minutes: 15 },\n    { seconds: 30 },\n    { seconds: 15 }\n];\nvar TimeGrid = /** @class */ (function (_super) {\n    __extends(TimeGrid, _super);\n    function TimeGrid(context, el, renderProps) {\n        var _this = _super.call(this, context, el) || this;\n        _this.isSlatSizesDirty = false;\n        _this.isColSizesDirty = false;\n        _this.renderSlats = memoizeRendering(_this._renderSlats);\n        var eventRenderer = _this.eventRenderer = new TimeGridEventRenderer(_this);\n        var fillRenderer = _this.fillRenderer = new TimeGridFillRenderer(_this);\n        _this.mirrorRenderer = new TimeGridMirrorRenderer(_this);\n        var renderColumns = _this.renderColumns = memoizeRendering(_this._renderColumns, _this._unrenderColumns);\n        _this.renderBusinessHours = memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderColumns]);\n        _this.renderDateSelection = memoizeRendering(_this._renderDateSelection, _this._unrenderDateSelection, [renderColumns]);\n        _this.renderFgEvents = memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderColumns]);\n        _this.renderBgEvents = memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderColumns]);\n        _this.renderEventSelection = memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n        _this.renderEventDrag = memoizeRendering(_this._renderEventDrag, _this._unrenderEventDrag, [renderColumns]);\n        _this.renderEventResize = memoizeRendering(_this._renderEventResize, _this._unrenderEventResize, [renderColumns]);\n        _this.processOptions();\n        el.innerHTML =\n            '<div class=\"fc-bg\"></div>' +\n                '<div class=\"fc-slats\"></div>' +\n                '<hr class=\"fc-divider ' + _this.theme.getClass('widgetHeader') + '\" style=\"display:none\" />';\n        _this.rootBgContainerEl = el.querySelector('.fc-bg');\n        _this.slatContainerEl = el.querySelector('.fc-slats');\n        _this.bottomRuleEl = el.querySelector('.fc-divider');\n        _this.renderProps = renderProps;\n        return _this;\n    }\n    /* Options\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Parses various options into properties of this object\n    TimeGrid.prototype.processOptions = function () {\n        var slotDuration = this.opt('slotDuration');\n        var snapDuration = this.opt('snapDuration');\n        var snapsPerSlot;\n        var input;\n        slotDuration = createDuration(slotDuration);\n        snapDuration = snapDuration ? createDuration(snapDuration) : slotDuration;\n        snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration);\n        if (snapsPerSlot === null) {\n            snapDuration = slotDuration;\n            snapsPerSlot = 1;\n            // TODO: say warning?\n        }\n        this.slotDuration = slotDuration;\n        this.snapDuration = snapDuration;\n        this.snapsPerSlot = snapsPerSlot;\n        // might be an array value (for TimelineView).\n        // if so, getting the most granular entry (the last one probably).\n        input = this.opt('slotLabelFormat');\n        if (Array.isArray(input)) {\n            input = input[input.length - 1];\n        }\n        this.labelFormat = createFormatter(input || {\n            hour: 'numeric',\n            minute: '2-digit',\n            omitZeroMinute: true,\n            meridiem: 'short'\n        });\n        input = this.opt('slotLabelInterval');\n        this.labelInterval = input ?\n            createDuration(input) :\n            this.computeLabelInterval(slotDuration);\n    };\n    // Computes an automatic value for slotLabelInterval\n    TimeGrid.prototype.computeLabelInterval = function (slotDuration) {\n        var i;\n        var labelInterval;\n        var slotsPerLabel;\n        // find the smallest stock label interval that results in more than one slots-per-label\n        for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {\n            labelInterval = createDuration(AGENDA_STOCK_SUB_DURATIONS[i]);\n            slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration);\n            if (slotsPerLabel !== null && slotsPerLabel > 1) {\n                return labelInterval;\n            }\n        }\n        return slotDuration; // fall back\n    };\n    /* Rendering\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype.render = function (props) {\n        var cells = props.cells;\n        this.colCnt = cells.length;\n        this.renderSlats(props.dateProfile);\n        this.renderColumns(props.cells, props.dateProfile);\n        this.renderBusinessHours(props.businessHourSegs);\n        this.renderDateSelection(props.dateSelectionSegs);\n        this.renderFgEvents(props.fgEventSegs);\n        this.renderBgEvents(props.bgEventSegs);\n        this.renderEventSelection(props.eventSelection);\n        this.renderEventDrag(props.eventDrag);\n        this.renderEventResize(props.eventResize);\n    };\n    TimeGrid.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        // should unrender everything else too\n        this.renderSlats.unrender();\n        this.renderColumns.unrender();\n    };\n    TimeGrid.prototype.updateSize = function (isResize) {\n        var _a = this, fillRenderer = _a.fillRenderer, eventRenderer = _a.eventRenderer, mirrorRenderer = _a.mirrorRenderer;\n        if (isResize || this.isSlatSizesDirty) {\n            this.buildSlatPositions();\n            this.isSlatSizesDirty = false;\n        }\n        if (isResize || this.isColSizesDirty) {\n            this.buildColPositions();\n            this.isColSizesDirty = false;\n        }\n        fillRenderer.computeSizes(isResize);\n        eventRenderer.computeSizes(isResize);\n        mirrorRenderer.computeSizes(isResize);\n        fillRenderer.assignSizes(isResize);\n        eventRenderer.assignSizes(isResize);\n        mirrorRenderer.assignSizes(isResize);\n    };\n    TimeGrid.prototype._renderSlats = function (dateProfile) {\n        var theme = this.theme;\n        this.slatContainerEl.innerHTML =\n            '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                this.renderSlatRowHtml(dateProfile) +\n                '</table>';\n        this.slatEls = findElements(this.slatContainerEl, 'tr');\n        this.slatPositions = new PositionCache(this.el, this.slatEls, false, true // vertical\n        );\n        this.isSlatSizesDirty = true;\n    };\n    // Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n    TimeGrid.prototype.renderSlatRowHtml = function (dateProfile) {\n        var _a = this, dateEnv = _a.dateEnv, theme = _a.theme, isRtl = _a.isRtl;\n        var html = '';\n        var dayStart = startOfDay(dateProfile.renderRange.start);\n        var slotTime = dateProfile.minTime;\n        var slotIterator = createDuration(0);\n        var slotDate; // will be on the view's first day, but we only care about its time\n        var isLabeled;\n        var axisHtml;\n        // Calculate the time for each slot\n        while (asRoughMs(slotTime) < asRoughMs(dateProfile.maxTime)) {\n            slotDate = dateEnv.add(dayStart, slotTime);\n            isLabeled = wholeDivideDurations(slotIterator, this.labelInterval) !== null;\n            axisHtml =\n                '<td class=\"fc-axis fc-time ' + theme.getClass('widgetContent') + '\">' +\n                    (isLabeled ?\n                        '<span>' + // for matchCellWidths\n                            htmlEscape(dateEnv.format(slotDate, this.labelFormat)) +\n                            '</span>' :\n                        '') +\n                    '</td>';\n            html +=\n                '<tr data-time=\"' + formatIsoTimeString(slotDate) + '\"' +\n                    (isLabeled ? '' : ' class=\"fc-minor\"') +\n                    '>' +\n                    (!isRtl ? axisHtml : '') +\n                    '<td class=\"' + theme.getClass('widgetContent') + '\"></td>' +\n                    (isRtl ? axisHtml : '') +\n                    '</tr>';\n            slotTime = addDurations(slotTime, this.slotDuration);\n            slotIterator = addDurations(slotIterator, this.slotDuration);\n        }\n        return html;\n    };\n    TimeGrid.prototype._renderColumns = function (cells, dateProfile) {\n        var _a = this, theme = _a.theme, dateEnv = _a.dateEnv, view = _a.view;\n        var bgRow = new DayBgRow(this.context);\n        this.rootBgContainerEl.innerHTML =\n            '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                bgRow.renderHtml({\n                    cells: cells,\n                    dateProfile: dateProfile,\n                    renderIntroHtml: this.renderProps.renderBgIntroHtml\n                }) +\n                '</table>';\n        this.colEls = findElements(this.el, '.fc-day, .fc-disabled-day');\n        for (var col = 0; col < this.colCnt; col++) {\n            this.publiclyTrigger('dayRender', [\n                {\n                    date: dateEnv.toDate(cells[col].date),\n                    el: this.colEls[col],\n                    view: view\n                }\n            ]);\n        }\n        if (this.isRtl) {\n            this.colEls.reverse();\n        }\n        this.colPositions = new PositionCache(this.el, this.colEls, true, // horizontal\n        false);\n        this.renderContentSkeleton();\n        this.isColSizesDirty = true;\n    };\n    TimeGrid.prototype._unrenderColumns = function () {\n        this.unrenderContentSkeleton();\n    };\n    /* Content Skeleton\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Renders the DOM that the view's content will live in\n    TimeGrid.prototype.renderContentSkeleton = function () {\n        var parts = [];\n        var skeletonEl;\n        parts.push(this.renderProps.renderIntroHtml());\n        for (var i = 0; i < this.colCnt; i++) {\n            parts.push('<td>' +\n                '<div class=\"fc-content-col\">' +\n                '<div class=\"fc-event-container fc-mirror-container\"></div>' +\n                '<div class=\"fc-event-container\"></div>' +\n                '<div class=\"fc-highlight-container\"></div>' +\n                '<div class=\"fc-bgevent-container\"></div>' +\n                '<div class=\"fc-business-container\"></div>' +\n                '</div>' +\n                '</td>');\n        }\n        if (this.isRtl) {\n            parts.reverse();\n        }\n        skeletonEl = this.contentSkeletonEl = htmlToElement('<div class=\"fc-content-skeleton\">' +\n            '<table>' +\n            '<tr>' + parts.join('') + '</tr>' +\n            '</table>' +\n            '</div>');\n        this.colContainerEls = findElements(skeletonEl, '.fc-content-col');\n        this.mirrorContainerEls = findElements(skeletonEl, '.fc-mirror-container');\n        this.fgContainerEls = findElements(skeletonEl, '.fc-event-container:not(.fc-mirror-container)');\n        this.bgContainerEls = findElements(skeletonEl, '.fc-bgevent-container');\n        this.highlightContainerEls = findElements(skeletonEl, '.fc-highlight-container');\n        this.businessContainerEls = findElements(skeletonEl, '.fc-business-container');\n        if (this.isRtl) {\n            this.colContainerEls.reverse();\n            this.mirrorContainerEls.reverse();\n            this.fgContainerEls.reverse();\n            this.bgContainerEls.reverse();\n            this.highlightContainerEls.reverse();\n            this.businessContainerEls.reverse();\n        }\n        this.el.appendChild(skeletonEl);\n    };\n    TimeGrid.prototype.unrenderContentSkeleton = function () {\n        removeElement(this.contentSkeletonEl);\n    };\n    // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col\n    TimeGrid.prototype.groupSegsByCol = function (segs) {\n        var segsByCol = [];\n        var i;\n        for (i = 0; i < this.colCnt; i++) {\n            segsByCol.push([]);\n        }\n        for (i = 0; i < segs.length; i++) {\n            segsByCol[segs[i].col].push(segs[i]);\n        }\n        return segsByCol;\n    };\n    // Given segments grouped by column, insert the segments' elements into a parallel array of container\n    // elements, each living within a column.\n    TimeGrid.prototype.attachSegsByCol = function (segsByCol, containerEls) {\n        var col;\n        var segs;\n        var i;\n        for (col = 0; col < this.colCnt; col++) { // iterate each column grouping\n            segs = segsByCol[col];\n            for (i = 0; i < segs.length; i++) {\n                containerEls[col].appendChild(segs[i].el);\n            }\n        }\n    };\n    /* Now Indicator\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype.getNowIndicatorUnit = function () {\n        return 'minute'; // will refresh on the minute\n    };\n    TimeGrid.prototype.renderNowIndicator = function (segs, date) {\n        // HACK: if date columns not ready for some reason (scheduler)\n        if (!this.colContainerEls) {\n            return;\n        }\n        var top = this.computeDateTop(date);\n        var nodes = [];\n        var i;\n        // render lines within the columns\n        for (i = 0; i < segs.length; i++) {\n            var lineEl = createElement('div', { className: 'fc-now-indicator fc-now-indicator-line' });\n            lineEl.style.top = top + 'px';\n            this.colContainerEls[segs[i].col].appendChild(lineEl);\n            nodes.push(lineEl);\n        }\n        // render an arrow over the axis\n        if (segs.length > 0) { // is the current time in view?\n            var arrowEl = createElement('div', { className: 'fc-now-indicator fc-now-indicator-arrow' });\n            arrowEl.style.top = top + 'px';\n            this.contentSkeletonEl.appendChild(arrowEl);\n            nodes.push(arrowEl);\n        }\n        this.nowIndicatorEls = nodes;\n    };\n    TimeGrid.prototype.unrenderNowIndicator = function () {\n        if (this.nowIndicatorEls) {\n            this.nowIndicatorEls.forEach(removeElement);\n            this.nowIndicatorEls = null;\n        }\n    };\n    /* Coordinates\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype.getTotalSlatHeight = function () {\n        return this.slatContainerEl.getBoundingClientRect().height;\n    };\n    // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n    // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n    TimeGrid.prototype.computeDateTop = function (when, startOfDayDate) {\n        if (!startOfDayDate) {\n            startOfDayDate = startOfDay(when);\n        }\n        return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()));\n    };\n    // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n    TimeGrid.prototype.computeTimeTop = function (duration) {\n        var len = this.slatEls.length;\n        var dateProfile = this.props.dateProfile;\n        var slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.minTime)) / asRoughMs(this.slotDuration); // floating-point value of # of slots covered\n        var slatIndex;\n        var slatRemainder;\n        // compute a floating-point number for how many slats should be progressed through.\n        // from 0 to number of slats (inclusive)\n        // constrained because minTime/maxTime might be customized.\n        slatCoverage = Math.max(0, slatCoverage);\n        slatCoverage = Math.min(len, slatCoverage);\n        // an integer index of the furthest whole slat\n        // from 0 to number slats (*exclusive*, so len-1)\n        slatIndex = Math.floor(slatCoverage);\n        slatIndex = Math.min(slatIndex, len - 1);\n        // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n        // could be 1.0 if slatCoverage is covering *all* the slots\n        slatRemainder = slatCoverage - slatIndex;\n        return this.slatPositions.tops[slatIndex] +\n            this.slatPositions.getHeight(slatIndex) * slatRemainder;\n    };\n    // For each segment in an array, computes and assigns its top and bottom properties\n    TimeGrid.prototype.computeSegVerticals = function (segs) {\n        var eventMinHeight = this.opt('timeGridEventMinHeight');\n        var i;\n        var seg;\n        var dayDate;\n        for (i = 0; i < segs.length; i++) {\n            seg = segs[i];\n            dayDate = this.props.cells[seg.col].date;\n            seg.top = this.computeDateTop(seg.start, dayDate);\n            seg.bottom = Math.max(seg.top + eventMinHeight, this.computeDateTop(seg.end, dayDate));\n        }\n    };\n    // Given segments that already have their top/bottom properties computed, applies those values to\n    // the segments' elements.\n    TimeGrid.prototype.assignSegVerticals = function (segs) {\n        var i;\n        var seg;\n        for (i = 0; i < segs.length; i++) {\n            seg = segs[i];\n            applyStyle(seg.el, this.generateSegVerticalCss(seg));\n        }\n    };\n    // Generates an object with CSS properties for the top/bottom coordinates of a segment element\n    TimeGrid.prototype.generateSegVerticalCss = function (seg) {\n        return {\n            top: seg.top,\n            bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container\n        };\n    };\n    /* Sizing\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype.buildPositionCaches = function () {\n        this.buildColPositions();\n        this.buildSlatPositions();\n    };\n    TimeGrid.prototype.buildColPositions = function () {\n        this.colPositions.build();\n    };\n    TimeGrid.prototype.buildSlatPositions = function () {\n        this.slatPositions.build();\n    };\n    /* Hit System\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype.positionToHit = function (positionLeft, positionTop) {\n        var _a = this, dateEnv = _a.dateEnv, snapsPerSlot = _a.snapsPerSlot, slatPositions = _a.slatPositions, colPositions = _a.colPositions;\n        var colIndex = colPositions.leftToIndex(positionLeft);\n        var slatIndex = slatPositions.topToIndex(positionTop);\n        if (colIndex != null && slatIndex != null) {\n            var slatTop = slatPositions.tops[slatIndex];\n            var slatHeight = slatPositions.getHeight(slatIndex);\n            var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n            var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n            var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n            var dayDate = this.props.cells[colIndex].date;\n            var time = addDurations(this.props.dateProfile.minTime, multiplyDuration(this.snapDuration, snapIndex));\n            var start = dateEnv.add(dayDate, time);\n            var end = dateEnv.add(start, this.snapDuration);\n            return {\n                col: colIndex,\n                dateSpan: {\n                    range: { start: start, end: end },\n                    allDay: false\n                },\n                dayEl: this.colEls[colIndex],\n                relativeRect: {\n                    left: colPositions.lefts[colIndex],\n                    right: colPositions.rights[colIndex],\n                    top: slatTop,\n                    bottom: slatTop + slatHeight\n                }\n            };\n        }\n    };\n    /* Event Drag Visualization\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype._renderEventDrag = function (state) {\n        if (state) {\n            this.eventRenderer.hideByHash(state.affectedInstances);\n            if (state.isEvent) {\n                this.mirrorRenderer.renderSegs(state.segs, { isDragging: true, sourceSeg: state.sourceSeg });\n            }\n            else {\n                this.fillRenderer.renderSegs('highlight', state.segs);\n            }\n        }\n    };\n    TimeGrid.prototype._unrenderEventDrag = function (state) {\n        if (state) {\n            this.eventRenderer.showByHash(state.affectedInstances);\n            this.mirrorRenderer.unrender(state.segs, { isDragging: true, sourceSeg: state.sourceSeg });\n            this.fillRenderer.unrender('highlight');\n        }\n    };\n    /* Event Resize Visualization\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype._renderEventResize = function (state) {\n        if (state) {\n            this.eventRenderer.hideByHash(state.affectedInstances);\n            this.mirrorRenderer.renderSegs(state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n        }\n    };\n    TimeGrid.prototype._unrenderEventResize = function (state) {\n        if (state) {\n            this.eventRenderer.showByHash(state.affectedInstances);\n            this.mirrorRenderer.unrender(state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n        }\n    };\n    /* Selection\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.\n    TimeGrid.prototype._renderDateSelection = function (segs) {\n        if (segs) {\n            if (this.opt('selectMirror')) {\n                this.mirrorRenderer.renderSegs(segs, { isSelecting: true });\n            }\n            else {\n                this.fillRenderer.renderSegs('highlight', segs);\n            }\n        }\n    };\n    TimeGrid.prototype._unrenderDateSelection = function (segs) {\n        this.mirrorRenderer.unrender(segs, { isSelecting: true });\n        this.fillRenderer.unrender('highlight');\n    };\n    return TimeGrid;\n}(DateComponent));\n\nvar AllDaySplitter = /** @class */ (function (_super) {\n    __extends(AllDaySplitter, _super);\n    function AllDaySplitter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AllDaySplitter.prototype.getKeyInfo = function () {\n        return {\n            allDay: {},\n            timed: {}\n        };\n    };\n    AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n        if (dateSpan.allDay) {\n            return ['allDay'];\n        }\n        else {\n            return ['timed'];\n        }\n    };\n    AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {\n        if (!eventDef.allDay) {\n            return ['timed'];\n        }\n        else if (hasBgRendering(eventDef)) {\n            return ['timed', 'allDay'];\n        }\n        else {\n            return ['allDay'];\n        }\n    };\n    return AllDaySplitter;\n}(Splitter));\n\nvar TIMEGRID_ALL_DAY_EVENT_LIMIT = 5;\nvar WEEK_HEADER_FORMAT = createFormatter({ week: 'short' });\n/* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n// Responsible for managing width/height.\nvar TimeGridView = /** @class */ (function (_super) {\n    __extends(TimeGridView, _super);\n    function TimeGridView(context, viewSpec, dateProfileGenerator, parentEl) {\n        var _this = _super.call(this, context, viewSpec, dateProfileGenerator, parentEl) || this;\n        _this.splitter = new AllDaySplitter();\n        /* Header Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Generates the HTML that will go before the day-of week header cells\n        _this.renderHeadIntroHtml = function () {\n            var _a = _this, theme = _a.theme, dateEnv = _a.dateEnv;\n            var range = _this.props.dateProfile.renderRange;\n            var dayCnt = diffDays(range.start, range.end);\n            var weekText;\n            if (_this.opt('weekNumbers')) {\n                weekText = dateEnv.format(range.start, WEEK_HEADER_FORMAT);\n                return '' +\n                    '<th class=\"fc-axis fc-week-number ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '>' +\n                    buildGotoAnchorHtml(// aside from link, important for matchCellWidths\n                    _this, { date: range.start, type: 'week', forceOff: dayCnt > 1 }, htmlEscape(weekText) // inner HTML\n                    ) +\n                    '</th>';\n            }\n            else {\n                return '<th class=\"fc-axis ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '></th>';\n            }\n        };\n        /* Time Grid Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.\n        _this.renderTimeGridBgIntroHtml = function () {\n            var theme = _this.theme;\n            return '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '></td>';\n        };\n        // Generates the HTML that goes before all other types of cells.\n        // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n        _this.renderTimeGridIntroHtml = function () {\n            return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n        };\n        /* Day Grid Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Generates the HTML that goes before the all-day cells\n        _this.renderDayGridBgIntroHtml = function () {\n            var theme = _this.theme;\n            return '' +\n                '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '>' +\n                '<span>' + // needed for matchCellWidths\n                getAllDayHtml(_this) +\n                '</span>' +\n                '</td>';\n        };\n        // Generates the HTML that goes before all other types of cells.\n        // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n        _this.renderDayGridIntroHtml = function () {\n            return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n        };\n        _this.el.classList.add('fc-timeGrid-view');\n        _this.el.innerHTML = _this.renderSkeletonHtml();\n        _this.scroller = new ScrollComponent('hidden', // overflow x\n        'auto' // overflow y\n        );\n        var timeGridWrapEl = _this.scroller.el;\n        _this.el.querySelector('.fc-body > tr > td').appendChild(timeGridWrapEl);\n        timeGridWrapEl.classList.add('fc-time-grid-container');\n        var timeGridEl = createElement('div', { className: 'fc-time-grid' });\n        timeGridWrapEl.appendChild(timeGridEl);\n        _this.timeGrid = new TimeGrid(_this.context, timeGridEl, {\n            renderBgIntroHtml: _this.renderTimeGridBgIntroHtml,\n            renderIntroHtml: _this.renderTimeGridIntroHtml\n        });\n        if (_this.opt('allDaySlot')) { // should we display the \"all-day\" area?\n            _this.dayGrid = new DayGrid(// the all-day subcomponent of this view\n            _this.context, _this.el.querySelector('.fc-day-grid'), {\n                renderNumberIntroHtml: _this.renderDayGridIntroHtml,\n                renderBgIntroHtml: _this.renderDayGridBgIntroHtml,\n                renderIntroHtml: _this.renderDayGridIntroHtml,\n                colWeekNumbersVisible: false,\n                cellWeekNumbersVisible: false\n            });\n            // have the day-grid extend it's coordinate area over the <hr> dividing the two grids\n            var dividerEl = _this.el.querySelector('.fc-divider');\n            _this.dayGrid.bottomCoordPadding = dividerEl.getBoundingClientRect().height;\n        }\n        return _this;\n    }\n    TimeGridView.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.timeGrid.destroy();\n        if (this.dayGrid) {\n            this.dayGrid.destroy();\n        }\n        this.scroller.destroy();\n    };\n    /* Rendering\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Builds the HTML skeleton for the view.\n    // The day-grid and time-grid components will render inside containers defined by this HTML.\n    TimeGridView.prototype.renderSkeletonHtml = function () {\n        var theme = this.theme;\n        return '' +\n            '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n            (this.opt('columnHeader') ?\n                '<thead class=\"fc-head\">' +\n                    '<tr>' +\n                    '<td class=\"fc-head-container ' + theme.getClass('widgetHeader') + '\">&nbsp;</td>' +\n                    '</tr>' +\n                    '</thead>' :\n                '') +\n            '<tbody class=\"fc-body\">' +\n            '<tr>' +\n            '<td class=\"' + theme.getClass('widgetContent') + '\">' +\n            (this.opt('allDaySlot') ?\n                '<div class=\"fc-day-grid\"></div>' +\n                    '<hr class=\"fc-divider ' + theme.getClass('widgetHeader') + '\" />' :\n                '') +\n            '</td>' +\n            '</tr>' +\n            '</tbody>' +\n            '</table>';\n    };\n    /* Now Indicator\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGridView.prototype.getNowIndicatorUnit = function () {\n        return this.timeGrid.getNowIndicatorUnit();\n    };\n    // subclasses should implement\n    // renderNowIndicator(date: DateMarker) {\n    // }\n    TimeGridView.prototype.unrenderNowIndicator = function () {\n        this.timeGrid.unrenderNowIndicator();\n    };\n    /* Dimensions\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n        _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first\n        this.timeGrid.updateSize(isResize);\n        if (this.dayGrid) {\n            this.dayGrid.updateSize(isResize);\n        }\n    };\n    // Adjusts the vertical dimensions of the view to the specified values\n    TimeGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n        var _this = this;\n        var eventLimit;\n        var scrollerHeight;\n        var scrollbarWidths;\n        // make all axis cells line up\n        this.axisWidth = matchCellWidths(findElements(this.el, '.fc-axis'));\n        // hack to give the view some height prior to timeGrid's columns being rendered\n        // TODO: separate setting height from scroller VS timeGrid.\n        if (!this.timeGrid.colEls) {\n            if (!isAuto) {\n                scrollerHeight = this.computeScrollerHeight(viewHeight);\n                this.scroller.setHeight(scrollerHeight);\n            }\n            return;\n        }\n        // set of fake row elements that must compensate when scroller has scrollbars\n        var noScrollRowEls = findElements(this.el, '.fc-row').filter(function (node) {\n            return !_this.scroller.el.contains(node);\n        });\n        // reset all dimensions back to the original state\n        this.timeGrid.bottomRuleEl.style.display = 'none'; // will be shown later if this <hr> is necessary\n        this.scroller.clear(); // sets height to 'auto' and clears overflow\n        noScrollRowEls.forEach(uncompensateScroll);\n        // limit number of events in the all-day area\n        if (this.dayGrid) {\n            this.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n            eventLimit = this.opt('eventLimit');\n            if (eventLimit && typeof eventLimit !== 'number') {\n                eventLimit = TIMEGRID_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number\n            }\n            if (eventLimit) {\n                this.dayGrid.limitRows(eventLimit);\n            }\n        }\n        if (!isAuto) { // should we force dimensions of the scroll container?\n            scrollerHeight = this.computeScrollerHeight(viewHeight);\n            this.scroller.setHeight(scrollerHeight);\n            scrollbarWidths = this.scroller.getScrollbarWidths();\n            if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?\n                // make the all-day and header rows lines up\n                noScrollRowEls.forEach(function (rowEl) {\n                    compensateScroll(rowEl, scrollbarWidths);\n                });\n                // the scrollbar compensation might have changed text flow, which might affect height, so recalculate\n                // and reapply the desired height to the scroller.\n                scrollerHeight = this.computeScrollerHeight(viewHeight);\n                this.scroller.setHeight(scrollerHeight);\n            }\n            // guarantees the same scrollbar widths\n            this.scroller.lockOverflow(scrollbarWidths);\n            // if there's any space below the slats, show the horizontal rule.\n            // this won't cause any new overflow, because lockOverflow already called.\n            if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {\n                this.timeGrid.bottomRuleEl.style.display = '';\n            }\n        }\n    };\n    // given a desired total height of the view, returns what the height of the scroller should be\n    TimeGridView.prototype.computeScrollerHeight = function (viewHeight) {\n        return viewHeight -\n            subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n    };\n    /* Scroll\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Computes the initial pre-configured scroll state prior to allowing the user to change it\n    TimeGridView.prototype.computeDateScroll = function (duration) {\n        var top = this.timeGrid.computeTimeTop(duration);\n        // zoom can give weird floating-point values. rather scroll a little bit further\n        top = Math.ceil(top);\n        if (top) {\n            top++; // to overcome top border that slots beyond the first have. looks better\n        }\n        return { top: top };\n    };\n    TimeGridView.prototype.queryDateScroll = function () {\n        return { top: this.scroller.getScrollTop() };\n    };\n    TimeGridView.prototype.applyDateScroll = function (scroll) {\n        if (scroll.top !== undefined) {\n            this.scroller.setScrollTop(scroll.top);\n        }\n    };\n    // Generates an HTML attribute string for setting the width of the axis, if it is known\n    TimeGridView.prototype.axisStyleAttr = function () {\n        if (this.axisWidth != null) {\n            return 'style=\"width:' + this.axisWidth + 'px\"';\n        }\n        return '';\n    };\n    return TimeGridView;\n}(View));\nTimeGridView.prototype.usesMinMaxTime = true; // indicates that minTime/maxTime affects rendering\n\nvar SimpleTimeGrid = /** @class */ (function (_super) {\n    __extends(SimpleTimeGrid, _super);\n    function SimpleTimeGrid(context, timeGrid) {\n        var _this = _super.call(this, context, timeGrid.el) || this;\n        _this.buildDayRanges = memoize(buildDayRanges);\n        _this.slicer = new TimeGridSlicer();\n        _this.timeGrid = timeGrid;\n        context.calendar.registerInteractiveComponent(_this, {\n            el: _this.timeGrid.el\n        });\n        return _this;\n    }\n    SimpleTimeGrid.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.calendar.unregisterInteractiveComponent(this);\n    };\n    SimpleTimeGrid.prototype.render = function (props) {\n        var dateProfile = props.dateProfile, dayTable = props.dayTable;\n        var dayRanges = this.dayRanges = this.buildDayRanges(dayTable, dateProfile, this.dateEnv);\n        this.timeGrid.receiveProps(__assign({}, this.slicer.sliceProps(props, dateProfile, null, this.timeGrid, dayRanges), { dateProfile: dateProfile, cells: dayTable.cells[0] }));\n    };\n    SimpleTimeGrid.prototype.renderNowIndicator = function (date) {\n        this.timeGrid.renderNowIndicator(this.slicer.sliceNowDate(date, this.timeGrid, this.dayRanges), date);\n    };\n    SimpleTimeGrid.prototype.buildPositionCaches = function () {\n        this.timeGrid.buildPositionCaches();\n    };\n    SimpleTimeGrid.prototype.queryHit = function (positionLeft, positionTop) {\n        var rawHit = this.timeGrid.positionToHit(positionLeft, positionTop);\n        if (rawHit) {\n            return {\n                component: this.timeGrid,\n                dateSpan: rawHit.dateSpan,\n                dayEl: rawHit.dayEl,\n                rect: {\n                    left: rawHit.relativeRect.left,\n                    right: rawHit.relativeRect.right,\n                    top: rawHit.relativeRect.top,\n                    bottom: rawHit.relativeRect.bottom\n                },\n                layer: 0\n            };\n        }\n    };\n    return SimpleTimeGrid;\n}(DateComponent));\nfunction buildDayRanges(dayTable, dateProfile, dateEnv) {\n    var ranges = [];\n    for (var _i = 0, _a = dayTable.headerDates; _i < _a.length; _i++) {\n        var date = _a[_i];\n        ranges.push({\n            start: dateEnv.add(date, dateProfile.minTime),\n            end: dateEnv.add(date, dateProfile.maxTime)\n        });\n    }\n    return ranges;\n}\nvar TimeGridSlicer = /** @class */ (function (_super) {\n    __extends(TimeGridSlicer, _super);\n    function TimeGridSlicer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TimeGridSlicer.prototype.sliceRange = function (range, dayRanges) {\n        var segs = [];\n        for (var col = 0; col < dayRanges.length; col++) {\n            var segRange = intersectRanges(range, dayRanges[col]);\n            if (segRange) {\n                segs.push({\n                    start: segRange.start,\n                    end: segRange.end,\n                    isStart: segRange.start.valueOf() === range.start.valueOf(),\n                    isEnd: segRange.end.valueOf() === range.end.valueOf(),\n                    col: col\n                });\n            }\n        }\n        return segs;\n    };\n    return TimeGridSlicer;\n}(Slicer));\n\nvar TimeGridView$1 = /** @class */ (function (_super) {\n    __extends(TimeGridView, _super);\n    function TimeGridView(_context, viewSpec, dateProfileGenerator, parentEl) {\n        var _this = _super.call(this, _context, viewSpec, dateProfileGenerator, parentEl) || this;\n        _this.buildDayTable = memoize(buildDayTable);\n        if (_this.opt('columnHeader')) {\n            _this.header = new DayHeader(_this.context, _this.el.querySelector('.fc-head-container'));\n        }\n        _this.simpleTimeGrid = new SimpleTimeGrid(_this.context, _this.timeGrid);\n        if (_this.dayGrid) {\n            _this.simpleDayGrid = new SimpleDayGrid(_this.context, _this.dayGrid);\n        }\n        return _this;\n    }\n    TimeGridView.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        if (this.header) {\n            this.header.destroy();\n        }\n        this.simpleTimeGrid.destroy();\n        if (this.simpleDayGrid) {\n            this.simpleDayGrid.destroy();\n        }\n    };\n    TimeGridView.prototype.render = function (props) {\n        _super.prototype.render.call(this, props); // for flags for updateSize\n        var dateProfile = this.props.dateProfile;\n        var dayTable = this.buildDayTable(dateProfile, this.dateProfileGenerator);\n        var splitProps = this.splitter.splitProps(props);\n        if (this.header) {\n            this.header.receiveProps({\n                dateProfile: dateProfile,\n                dates: dayTable.headerDates,\n                datesRepDistinctDays: true,\n                renderIntroHtml: this.renderHeadIntroHtml\n            });\n        }\n        this.simpleTimeGrid.receiveProps(__assign({}, splitProps['timed'], { dateProfile: dateProfile,\n            dayTable: dayTable }));\n        if (this.simpleDayGrid) {\n            this.simpleDayGrid.receiveProps(__assign({}, splitProps['allDay'], { dateProfile: dateProfile,\n                dayTable: dayTable, nextDayThreshold: this.nextDayThreshold, isRigid: false }));\n        }\n    };\n    TimeGridView.prototype.renderNowIndicator = function (date) {\n        this.simpleTimeGrid.renderNowIndicator(date);\n    };\n    return TimeGridView;\n}(TimeGridView));\nfunction buildDayTable(dateProfile, dateProfileGenerator) {\n    var daySeries = new DaySeries(dateProfile.renderRange, dateProfileGenerator);\n    return new DayTable(daySeries, false);\n}\n\nvar main = createPlugin({\n    defaultView: 'timeGridWeek',\n    views: {\n        timeGrid: {\n            class: TimeGridView$1,\n            allDaySlot: true,\n            slotDuration: '00:30:00',\n            slotEventOverlap: true // a bad name. confused with overlap/constraint system\n        },\n        timeGridDay: {\n            type: 'timeGrid',\n            duration: { days: 1 }\n        },\n        timeGridWeek: {\n            type: 'timeGrid',\n            duration: { weeks: 1 }\n        }\n    }\n});\n\nexport default main;\nexport { TimeGridView as AbstractTimeGridView, TimeGrid, TimeGridSlicer, TimeGridView$1 as TimeGridView, buildDayRanges, buildDayTable };\n"]},"metadata":{},"sourceType":"module"}