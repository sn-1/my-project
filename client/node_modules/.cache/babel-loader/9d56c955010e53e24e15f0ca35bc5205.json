{"ast":null,"code":"import _regeneratorRuntime from\"/Users/sanjidanawrin/n3/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/sanjidanawrin/n3/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/sanjidanawrin/n3/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{GoogleMap,withScriptjs,withGoogleMap,Marker,InfoWindow}from\"react-google-maps\";import PlacesAutocomplete,{geocodeByAddress,getLatLng}from\"react-places-autocomplete\";function Map(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),selectedPlace=_useState2[0],setSelectedPlace=_useState2[1];var _React$useState=React.useState(\"\"),_React$useState2=_slicedToArray(_React$useState,2),address=_React$useState2[0],setAddress=_React$useState2[1];var _React$useState3=React.useState({lat:39.106667,lng:-94.676392}),_React$useState4=_slicedToArray(_React$useState3,2),coordinates=_React$useState4[0],setCoordinates=_React$useState4[1];var _React$useState5=React.useState(\"\"),_React$useState6=_slicedToArray(_React$useState5,2),placeId=_React$useState6[0],setplaceId=_React$useState6[1];var center=coordinates;var handleSelect=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(value){var results,latLng;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return geocodeByAddress(value);case 2:results=_context.sent;_context.next=5;return getLatLng(results[0]);case 5:latLng=_context.sent;setAddress(value);setCoordinates(latLng);setplaceId(results[0].place_id);console.log(results[0].place_id);case 10:case\"end\":return _context.stop();}}},_callee);}));return function handleSelect(_x){return _ref.apply(this,arguments);};}();var map=[];var request={placeId:placeId,fields:['name','formatted_address','rating','formatted_phone_number','geometry']};var service=new window.google.maps.places.PlacesService(map);function handlePlacesDetails(){service.getDetails(request,function(place,status){if(status===window.google.maps.places.PlacesServiceStatus.OK){var marker=new window.google.maps.Marker({map:map,position:place.geometry.location});window.google.maps.event.addListener(marker,'click',function(){window.infowindow.setContent('<div><strong>'+place.name+'</strong><br>'+'Place ID: '+place.place_id+'<br>'+place.formatted_address+'</div>');window.infowindow.open(map,this);});}});}return React.createElement(\"div\",null,React.createElement(PlacesAutocomplete,{value:address,onChange:setAddress,onSelect:handleSelect},function(_ref2){var getInputProps=_ref2.getInputProps,suggestions=_ref2.suggestions,getSuggestionItemProps=_ref2.getSuggestionItemProps,loading=_ref2.loading;return React.createElement(\"div\",null,React.createElement(\"input\",getInputProps({placeholder:\"Type address\"})),React.createElement(\"div\",null,loading?React.createElement(\"div\",null,\"...loading\"):null,suggestions.map(function(suggestion){var style={backgroundColor:suggestion.active?\"#41b6e6\":\"#fff\"};console.log(suggestions);return React.createElement(\"div\",getSuggestionItemProps(suggestion,{style:style}),suggestion.description);})));}),React.createElement(GoogleMap,{defaultZoom:10,center:center},React.createElement(Marker,{position:new window.google.maps.LatLng(coordinates.lat,coordinates.lng),onClick:function onClick(){setSelectedPlace(address);}}),selectedPlace&&React.createElement(InfoWindow,{position:{lat:coordinates.lat,lng:coordinates.lng},onCloseClick:function onCloseClick(){setSelectedPlace(null);},onClick:handlePlacesDetails},React.createElement(\"div\",null,address))));}var WrappedMap=withScriptjs(withGoogleMap(Map));export default WrappedMap;","map":{"version":3,"sources":["/Users/sanjidanawrin/n3/client/src/components/GoogleMaps/index.js"],"names":["React","useState","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","PlacesAutocomplete","geocodeByAddress","getLatLng","Map","selectedPlace","setSelectedPlace","address","setAddress","lat","lng","coordinates","setCoordinates","placeId","setplaceId","center","handleSelect","value","results","latLng","place_id","console","log","map","request","fields","service","window","google","maps","places","PlacesService","handlePlacesDetails","getDetails","place","status","PlacesServiceStatus","OK","marker","position","geometry","location","event","addListener","infowindow","setContent","name","formatted_address","open","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","suggestion","style","backgroundColor","active","description","LatLng","WrappedMap"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport {GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow} from \"react-google-maps\";\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng\n  } from \"react-places-autocomplete\";\n\nfunction Map(){\n    const [selectedPlace, setSelectedPlace] =useState(null);\n    const [address, setAddress] = React.useState(\"\");\n    const [coordinates, setCoordinates] = React.useState({\n        lat: 39.106667,\n        lng: -94.676392\n    });\n    const [placeId, setplaceId] = React.useState(\"\");\n    \n    const center = coordinates\n    const handleSelect = async value => {\n        const results = await geocodeByAddress(value);\n        const latLng = await getLatLng(results[0]);\n        setAddress(value);\n        setCoordinates(latLng);\n        setplaceId(results[0].place_id)\n        console.log(results[0].place_id)\n       \n    }; \n    const map = [];\n    const request = {\n        placeId: placeId,\n        fields: ['name', 'formatted_address', 'rating', 'formatted_phone_number','geometry']\n    }  \n    const service = new window.google.maps.places.PlacesService(map)\n\n    function handlePlacesDetails() {\n        service.getDetails(request, function(place, status) {\n            if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n              var marker = new window.google.maps.Marker({\n                map: map,\n                position: place.geometry.location\n              });\n              window.google.maps.event.addListener(marker, 'click', function() {\n                window.infowindow.setContent('<div><strong>' + place.name + '</strong><br>' +\n                  'Place ID: ' + place.place_id + '<br>' +\n                  place.formatted_address + '</div>');\n                window.infowindow.open(map, this);\n              });\n            }\n          });\n       \n      }   \n    return(\n        <div>\n            <PlacesAutocomplete \n                value={address}\n                onChange={setAddress}\n                onSelect={handleSelect}\n                >\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                    <div>\n                    {/* <p>Latitude: {coordinates.lat}</p>\n                    <p>Longitude: {coordinates.lng}</p> */}\n                    <input {...getInputProps({ placeholder: \"Type address\" })} />\n                    <div>\n                        {loading ? <div>...loading</div> : null}\n\n                        {suggestions.map(suggestion => {\n                        const style = {\n                            backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\"\n                        };\n                        console.log(suggestions);\n\n                        return (\n                            <div {...getSuggestionItemProps(suggestion, { style })}>\n                            {suggestion.description}\n                            </div>\n                        );\n                        })}\n                    </div>\n                    </div>\n                )}\n                </PlacesAutocomplete>\n\n            <GoogleMap \n                defaultZoom={10} \n                center={center}\n            >\n                    <Marker \n                        position={\n                        new window.google.maps.LatLng(coordinates.lat, coordinates.lng)} \n                        onClick={()=>{\n                            setSelectedPlace(address);\n                        }}\n                    />\n                    {selectedPlace && (\n                        <InfoWindow\n                        position ={{\n                            lat: coordinates.lat,\n                            lng: coordinates.lng\n                        }}\n                        onCloseClick={() => {\n                            setSelectedPlace(null);\n                        }}\n                        onClick={handlePlacesDetails}\n                        >\n                            <div>{address}</div>\n                        </InfoWindow>\n                    )}\n                </GoogleMap>\n            </div>\n    );\n}\n\nconst WrappedMap = withScriptjs (withGoogleMap(Map))\n\nexport default WrappedMap;\n"]},"metadata":{},"sourceType":"module"}