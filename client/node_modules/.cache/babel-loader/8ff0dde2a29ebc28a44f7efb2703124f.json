{"ast":null,"code":"var _jsxFileName = \"/Users/sanjidanawrin/Project-3/client/src/components/GoogleMaps/index.js\";\nimport React, { useState } from \"react\";\nimport { GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow } from \"react-google-maps\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\n\nfunction Map() {\n  const [selectedPlace, setSelectedPlace] = useState(null);\n  const [address, setAddress] = React.useState(\"\");\n  const [coordinates, setCoordinates] = React.useState({\n    lat: 39.106667,\n    lng: -94.676392\n  });\n  const [placeId, setplaceId] = React.useState(\"\");\n  const center = coordinates;\n\n  const handleSelect = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    setAddress(value);\n    setCoordinates(latLng);\n    setplaceId(results[0].place_id);\n    console.log(results[0].place_id);\n  };\n\n  const map = [];\n  const request = {\n    placeId: placeId,\n    fields: ['name', 'formatted_address', 'rating', 'formatted_phone_number', 'geometry']\n  };\n  const service = new window.google.maps.places.PlacesService(map);\n\n  function handlePlacesDetails() {\n    service.getDetails(request, function (place, status) {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        var marker = new window.google.maps.Marker({\n          map: map,\n          position: place.geometry.location\n        });\n        window.google.maps.event.addListener(marker, 'click', function () {\n          window.infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + 'Place ID: ' + place.place_id + '<br>' + place.formatted_address + '</div>');\n          window.infowindow.open(map, this);\n        });\n      }\n    });\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(PlacesAutocomplete, {\n    value: address,\n    onChange: setAddress,\n    onSelect: handleSelect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, ({\n    getInputProps,\n    suggestions,\n    getSuggestionItemProps,\n    loading\n  }) => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"input\", Object.assign({}, getInputProps({\n    placeholder: \"Type address\"\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, loading ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"...loading\") : null, suggestions.map(suggestion => {\n    const style = {\n      backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\"\n    };\n    console.log(suggestions);\n    return React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n      style\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), suggestion.description);\n  })))), React.createElement(GoogleMap, {\n    defaultZoom: 10,\n    center: center,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Marker, {\n    position: new window.google.maps.LatLng(coordinates.lat, coordinates.lng),\n    onClick: () => {\n      setSelectedPlace(address);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), selectedPlace && React.createElement(InfoWindow, {\n    position: {\n      lat: coordinates.lat,\n      lng: coordinates.lng\n    },\n    onCloseClick: () => {\n      setSelectedPlace(null);\n    },\n    onClick: handlePlacesDetails,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, address))));\n}\n\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\nexport default WrappedMap;","map":{"version":3,"sources":["/Users/sanjidanawrin/Project-3/client/src/components/GoogleMaps/index.js"],"names":["React","useState","GoogleMap","withScriptjs","withGoogleMap","Marker","InfoWindow","PlacesAutocomplete","geocodeByAddress","getLatLng","Map","selectedPlace","setSelectedPlace","address","setAddress","coordinates","setCoordinates","lat","lng","placeId","setplaceId","center","handleSelect","value","results","latLng","place_id","console","log","map","request","fields","service","window","google","maps","places","PlacesService","handlePlacesDetails","getDetails","place","status","PlacesServiceStatus","OK","marker","position","geometry","location","event","addListener","infowindow","setContent","name","formatted_address","open","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","suggestion","style","backgroundColor","active","description","LatLng","WrappedMap"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport {GoogleMap, withScriptjs, withGoogleMap, Marker, InfoWindow} from \"react-google-maps\";\nimport PlacesAutocomplete, {\n    geocodeByAddress,\n    getLatLng\n  } from \"react-places-autocomplete\";\n\nfunction Map(){\n    const [selectedPlace, setSelectedPlace] =useState(null);\n    const [address, setAddress] = React.useState(\"\");\n    const [coordinates, setCoordinates] = React.useState({\n        lat: 39.106667,\n        lng: -94.676392\n    });\n    const [placeId, setplaceId] = React.useState(\"\");\n    \n    const center = coordinates\n    const handleSelect = async value => {\n        const results = await geocodeByAddress(value);\n        const latLng = await getLatLng(results[0]);\n        setAddress(value);\n        setCoordinates(latLng);\n        setplaceId(results[0].place_id)\n        console.log(results[0].place_id)\n       \n    }; \n    const map = [];\n    const request = {\n        placeId: placeId,\n        fields: ['name', 'formatted_address', 'rating', 'formatted_phone_number','geometry']\n    }  \n    const service = new window.google.maps.places.PlacesService(map)\n\n    function handlePlacesDetails() {\n        service.getDetails(request, function(place, status) {\n            if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n              var marker = new window.google.maps.Marker({\n                map: map,\n                position: place.geometry.location\n              });\n              window.google.maps.event.addListener(marker, 'click', function() {\n                window.infowindow.setContent('<div><strong>' + place.name + '</strong><br>' +\n                  'Place ID: ' + place.place_id + '<br>' +\n                  place.formatted_address + '</div>');\n                window.infowindow.open(map, this);\n              });\n            }\n          });\n       \n      }   \n    return(\n        <div>\n            <PlacesAutocomplete \n                value={address}\n                onChange={setAddress}\n                onSelect={handleSelect}\n                >\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n                    <div>\n                    {/* <p>Latitude: {coordinates.lat}</p>\n                    <p>Longitude: {coordinates.lng}</p> */}\n                    <input {...getInputProps({ placeholder: \"Type address\" })} />\n                    <div>\n                        {loading ? <div>...loading</div> : null}\n\n                        {suggestions.map(suggestion => {\n                        const style = {\n                            backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\"\n                        };\n                        console.log(suggestions);\n\n                        return (\n                            <div {...getSuggestionItemProps(suggestion, { style })}>\n                            {suggestion.description}\n                            </div>\n                        );\n                        })}\n                    </div>\n                    </div>\n                )}\n                </PlacesAutocomplete>\n\n            <GoogleMap \n                defaultZoom={10} \n                center={center}\n            >\n                    <Marker \n                        position={\n                        new window.google.maps.LatLng(coordinates.lat, coordinates.lng)} \n                        onClick={()=>{\n                            setSelectedPlace(address);\n                        }}\n                    />\n                    {selectedPlace && (\n                        <InfoWindow\n                        position ={{\n                            lat: coordinates.lat,\n                            lng: coordinates.lng\n                        }}\n                        onCloseClick={() => {\n                            setSelectedPlace(null);\n                        }}\n                        onClick={handlePlacesDetails}\n                        >\n                            <div>{address}</div>\n                        </InfoWindow>\n                    )}\n                </GoogleMap>\n            </div>\n    );\n}\n\nconst WrappedMap = withScriptjs (withGoogleMap(Map))\n\nexport default WrappedMap;\n"]},"metadata":{},"sourceType":"module"}