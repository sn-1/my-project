{"ast":null,"code":"import _toConsumableArray from\"/Users/sanjidanawrin/n3/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/sanjidanawrin/n3/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/sanjidanawrin/n3/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/sanjidanawrin/n3/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/sanjidanawrin/n3/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/Users/sanjidanawrin/n3/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/sanjidanawrin/n3/client/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import Chatkit from'@pusher/chatkit-client';import MessageList from'./components/chat/MessageList';import SendMessageForm from'./components/chat/SendMessageForm';import TypingIndicator from'./components/chat/TypingIndicator';import WhosOnlineList from'./components/chat/WhosOnlineList';var chatInstanceLocator=process.env.REACT_APP_CHAT_INSTANCE_LOCATOR;var chatRoomID=process.env.REACT_APP_CHAT_ROOM_ID;var ChatScreen=/*#__PURE__*/function(_Component){_inherits(ChatScreen,_Component);function ChatScreen(props){var _this;_classCallCheck(this,ChatScreen);_this=_possibleConstructorReturn(this,_getPrototypeOf(ChatScreen).call(this,props));_this.state={currentUser:{},currentRoom:{},messages:[],usersWhoAreTyping:[]};_this.sendMessage=_this.sendMessage.bind(_assertThisInitialized(_this));_this.sendTypingEvent=_this.sendTypingEvent.bind(_assertThisInitialized(_this));return _this;}_createClass(ChatScreen,[{key:\"sendTypingEvent\",value:function sendTypingEvent(){this.state.currentUser.isTypingIn({roomId:this.state.currentRoom.id}).catch(function(error){return console.error('error',error);});}},{key:\"sendMessage\",value:function sendMessage(text){this.state.currentUser.sendMessage({text:text,roomId:this.state.currentRoom.id});}},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;var chatManager=new Chatkit.ChatManager({instanceLocator:chatInstanceLocator,userId:this.props.currentUsername,tokenProvider:new Chatkit.TokenProvider({url:'/authenticate'})});chatManager.connect().then(function(currentUser){_this2.setState({currentUser:currentUser});return currentUser.subscribeToRoom({roomId:chatRoomID,messageLimit:100,hooks:{onMessage:function onMessage(message){_this2.setState({messages:[].concat(_toConsumableArray(_this2.state.messages),[message])});},onUserStartedTyping:function onUserStartedTyping(user){_this2.setState({usersWhoAreTyping:[].concat(_toConsumableArray(_this2.state.usersWhoAreTyping),[user.name])});},onUserStoppedTyping:function onUserStoppedTyping(user){_this2.setState({usersWhoAreTyping:_this2.state.usersWhoAreTyping.filter(function(username){return username!==user.name;})});},onPresenceChange:function onPresenceChange(){return _this2.forceUpdate();}}});}).then(function(currentRoom){_this2.setState({currentRoom:currentRoom});}).catch(function(error){return console.error('error',error);});}},{key:\"render\",value:function render(){var styles={container:{marginTop:'100px',height:'100vh',display:'flex',flexDirection:'column'},chatContainer:{display:'flex',flex:1},whosOnlineListContainer:{width:'300px',flex:'none',padding:20,backgroundColor:'#2c303b',color:'white'},chatListContainer:{padding:20,width:'85%',display:'flex',flexDirection:'column'}};return React.createElement(\"div\",{style:styles.container},React.createElement(\"div\",{style:styles.chatContainer},React.createElement(\"aside\",{style:styles.whosOnlineListContainer},React.createElement(WhosOnlineList,{currentUser:this.state.currentUser,users:this.state.currentRoom.users})),React.createElement(\"section\",{style:styles.chatListContainer},React.createElement(MessageList,{messages:this.state.messages,style:styles.chatList}),React.createElement(TypingIndicator,{usersWhoAreTyping:this.state.usersWhoAreTyping}),React.createElement(SendMessageForm,{onSubmit:this.sendMessage,onChange:this.sendTypingEvent}))));}}]);return ChatScreen;}(Component);export default ChatScreen;","map":{"version":3,"sources":["/Users/sanjidanawrin/n3/client/src/ChatScreen.js"],"names":["React","Component","Chatkit","MessageList","SendMessageForm","TypingIndicator","WhosOnlineList","chatInstanceLocator","process","env","REACT_APP_CHAT_INSTANCE_LOCATOR","chatRoomID","REACT_APP_CHAT_ROOM_ID","ChatScreen","props","state","currentUser","currentRoom","messages","usersWhoAreTyping","sendMessage","bind","sendTypingEvent","isTypingIn","roomId","id","catch","error","console","text","chatManager","ChatManager","instanceLocator","userId","currentUsername","tokenProvider","TokenProvider","url","connect","then","setState","subscribeToRoom","messageLimit","hooks","onMessage","message","onUserStartedTyping","user","name","onUserStoppedTyping","filter","username","onPresenceChange","forceUpdate","styles","container","marginTop","height","display","flexDirection","chatContainer","flex","whosOnlineListContainer","width","padding","backgroundColor","color","chatListContainer","users","chatList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport MessageList from './components/chat/MessageList';\nimport SendMessageForm from './components/chat/SendMessageForm';\nimport TypingIndicator from './components/chat/TypingIndicator';\nimport WhosOnlineList from './components/chat/WhosOnlineList';\n\nconst chatInstanceLocator = process.env.REACT_APP_CHAT_INSTANCE_LOCATOR\n\nconst chatRoomID = process.env.REACT_APP_CHAT_ROOM_ID\n\nclass ChatScreen extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentUser: {},\n      currentRoom: {},\n      messages: [],\n      usersWhoAreTyping: [],\n    }\n    this.sendMessage = this.sendMessage.bind(this)\n    this.sendTypingEvent = this.sendTypingEvent.bind(this)\n  }\n\n  sendTypingEvent() {\n    this.state.currentUser\n      .isTypingIn({ roomId: this.state.currentRoom.id })\n      .catch(error => console.error('error', error))\n  }\n\n  sendMessage(text) {\n    this.state.currentUser.sendMessage({\n      text,\n      roomId: this.state.currentRoom.id,\n    })\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: chatInstanceLocator,\n      userId: this.props.currentUsername,\n      tokenProvider: new Chatkit.TokenProvider({\n        url: '/authenticate',\n      }),\n    })\n\n    chatManager\n      .connect()\n      .then(currentUser => {\n        this.setState({ currentUser })\n        return currentUser.subscribeToRoom({\n          roomId: chatRoomID,\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              this.setState({\n                messages: [...this.state.messages, message],\n              })\n            },\n            onUserStartedTyping: user => {\n              this.setState({\n                usersWhoAreTyping: [...this.state.usersWhoAreTyping, user.name],\n              })\n            },\n            onUserStoppedTyping: user => {\n              this.setState({\n                usersWhoAreTyping: this.state.usersWhoAreTyping.filter(\n                  username => username !== user.name\n                ),\n              })\n            },\n            onPresenceChange: () => this.forceUpdate(),\n          },\n        })\n      })\n      .then(currentRoom => {\n        this.setState({ currentRoom })\n      })\n      .catch(error => console.error('error', error))\n  }\n  render() {\n    const styles = {\n      container: {\n        marginTop: '100px',\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n      },\n      chatContainer: {\n        display: 'flex',\n        flex: 1,\n      },\n      whosOnlineListContainer: {\n        width: '300px',\n        flex: 'none',\n        padding: 20,\n        backgroundColor: '#2c303b',\n        color: 'white',\n      },\n      chatListContainer: {\n        padding: 20,\n        width: '85%',\n        display: 'flex',\n        flexDirection: 'column',\n      },\n    }\n\n    return (\n      <div style={styles.container}>\n        <div style={styles.chatContainer}>\n          <aside style={styles.whosOnlineListContainer}>\n          <WhosOnlineList\n              currentUser={this.state.currentUser}\n              users={this.state.currentRoom.users}\n            />\n          </aside>\n          <section style={styles.chatListContainer}>\n            <MessageList\n              messages={this.state.messages}\n              style={styles.chatList}\n            />\n            <TypingIndicator usersWhoAreTyping={this.state.usersWhoAreTyping} />\n            <SendMessageForm onSubmit={this.sendMessage}\n            onChange={this.sendTypingEvent}\n             />\n          </section>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ChatScreen"]},"metadata":{},"sourceType":"module"}