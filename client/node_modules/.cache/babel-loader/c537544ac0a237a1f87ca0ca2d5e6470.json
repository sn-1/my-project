{"ast":null,"code":"var _jsxFileName = \"/Users/sanjidanawrin/Project-3/client/src/ChatScreen.js\";\nimport React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport MessageList from './components/chat/MessageList';\nimport SendMessageForm from './components/chat/SendMessageForm';\nimport TypingIndicator from './components/chat/TypingIndicator';\nimport WhosOnlineList from './components/chat/WhosOnlineList';\nconst chatInstanceLocator = process.env.REACT_APP_CHAT_INSTANCE_LOCATOR;\nconst chatRoomID = process.env.REACT_APP_CHAT_ROOM_ID;\n\nclass ChatScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUser: {},\n      currentRoom: {},\n      messages: [],\n      usersWhoAreTyping: []\n    };\n    this.sendMessage = this.sendMessage.bind(this);\n    this.sendTypingEvent = this.sendTypingEvent.bind(this);\n  }\n\n  sendTypingEvent() {\n    this.state.currentUser.isTypingIn({\n      roomId: this.state.currentRoom.id\n    }).catch(error => console.error('error', error));\n  }\n\n  sendMessage(text) {\n    this.state.currentUser.sendMessage({\n      text,\n      roomId: this.state.currentRoom.id\n    });\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: chatInstanceLocator,\n      userId: this.props.currentUsername,\n      tokenProvider: new Chatkit.TokenProvider({\n        url: '/authenticate'\n      })\n    });\n    chatManager.connect().then(currentUser => {\n      this.setState({\n        currentUser\n      });\n      return currentUser.subscribeToRoom({\n        roomId: chatRoomID,\n        messageLimit: 100,\n        hooks: {\n          onMessage: message => {\n            this.setState({\n              messages: [...this.state.messages, message]\n            });\n          },\n          onUserStartedTyping: user => {\n            this.setState({\n              usersWhoAreTyping: [...this.state.usersWhoAreTyping, user.name]\n            });\n          },\n          onUserStoppedTyping: user => {\n            this.setState({\n              usersWhoAreTyping: this.state.usersWhoAreTyping.filter(username => username !== user.name)\n            });\n          },\n          onPresenceChange: () => this.forceUpdate()\n        }\n      });\n    }).then(currentRoom => {\n      this.setState({\n        currentRoom\n      });\n    }).catch(error => console.error('error', error));\n  }\n\n  render() {\n    const styles = {\n      container: {\n        marginTop: '100px',\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      chatContainer: {\n        display: 'flex',\n        flex: 1\n      },\n      whosOnlineListContainer: {\n        width: '300px',\n        flex: 'none',\n        padding: 20,\n        backgroundColor: '#2c303b',\n        color: 'white'\n      },\n      chatListContainer: {\n        padding: 20,\n        width: '85%',\n        display: 'flex',\n        flexDirection: 'column'\n      }\n    };\n    return React.createElement(\"div\", {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: styles.chatContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"aside\", {\n      style: styles.whosOnlineListContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(WhosOnlineList, {\n      currentUser: this.state.currentUser,\n      users: this.state.currentRoom.users,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(\"section\", {\n      style: styles.chatListContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(MessageList, {\n      messages: this.state.messages,\n      style: styles.chatList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(TypingIndicator, {\n      usersWhoAreTyping: this.state.usersWhoAreTyping,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(SendMessageForm, {\n      onSubmit: this.sendMessage,\n      onChange: this.sendTypingEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default ChatScreen;","map":{"version":3,"sources":["/Users/sanjidanawrin/Project-3/client/src/ChatScreen.js"],"names":["React","Component","Chatkit","MessageList","SendMessageForm","TypingIndicator","WhosOnlineList","chatInstanceLocator","process","env","REACT_APP_CHAT_INSTANCE_LOCATOR","chatRoomID","REACT_APP_CHAT_ROOM_ID","ChatScreen","constructor","props","state","currentUser","currentRoom","messages","usersWhoAreTyping","sendMessage","bind","sendTypingEvent","isTypingIn","roomId","id","catch","error","console","text","componentDidMount","chatManager","ChatManager","instanceLocator","userId","currentUsername","tokenProvider","TokenProvider","url","connect","then","setState","subscribeToRoom","messageLimit","hooks","onMessage","message","onUserStartedTyping","user","name","onUserStoppedTyping","filter","username","onPresenceChange","forceUpdate","render","styles","container","marginTop","height","display","flexDirection","chatContainer","flex","whosOnlineListContainer","width","padding","backgroundColor","color","chatListContainer","users","chatList"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Chatkit from '@pusher/chatkit-client';\nimport MessageList from './components/chat/MessageList';\nimport SendMessageForm from './components/chat/SendMessageForm';\nimport TypingIndicator from './components/chat/TypingIndicator';\nimport WhosOnlineList from './components/chat/WhosOnlineList';\n\nconst chatInstanceLocator = process.env.REACT_APP_CHAT_INSTANCE_LOCATOR\n\nconst chatRoomID = process.env.REACT_APP_CHAT_ROOM_ID\n\nclass ChatScreen extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentUser: {},\n      currentRoom: {},\n      messages: [],\n      usersWhoAreTyping: [],\n    }\n    this.sendMessage = this.sendMessage.bind(this)\n    this.sendTypingEvent = this.sendTypingEvent.bind(this)\n  }\n\n  sendTypingEvent() {\n    this.state.currentUser\n      .isTypingIn({ roomId: this.state.currentRoom.id })\n      .catch(error => console.error('error', error))\n  }\n\n  sendMessage(text) {\n    this.state.currentUser.sendMessage({\n      text,\n      roomId: this.state.currentRoom.id,\n    })\n  }\n\n  componentDidMount() {\n    const chatManager = new Chatkit.ChatManager({\n      instanceLocator: chatInstanceLocator,\n      userId: this.props.currentUsername,\n      tokenProvider: new Chatkit.TokenProvider({\n        url: '/authenticate',\n      }),\n    })\n\n    chatManager\n      .connect()\n      .then(currentUser => {\n        this.setState({ currentUser })\n        return currentUser.subscribeToRoom({\n          roomId: chatRoomID,\n          messageLimit: 100,\n          hooks: {\n            onMessage: message => {\n              this.setState({\n                messages: [...this.state.messages, message],\n              })\n            },\n            onUserStartedTyping: user => {\n              this.setState({\n                usersWhoAreTyping: [...this.state.usersWhoAreTyping, user.name],\n              })\n            },\n            onUserStoppedTyping: user => {\n              this.setState({\n                usersWhoAreTyping: this.state.usersWhoAreTyping.filter(\n                  username => username !== user.name\n                ),\n              })\n            },\n            onPresenceChange: () => this.forceUpdate(),\n          },\n        })\n      })\n      .then(currentRoom => {\n        this.setState({ currentRoom })\n      })\n      .catch(error => console.error('error', error))\n  }\n  render() {\n    const styles = {\n      container: {\n        marginTop: '100px',\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column',\n      },\n      chatContainer: {\n        display: 'flex',\n        flex: 1,\n      },\n      whosOnlineListContainer: {\n        width: '300px',\n        flex: 'none',\n        padding: 20,\n        backgroundColor: '#2c303b',\n        color: 'white',\n      },\n      chatListContainer: {\n        padding: 20,\n        width: '85%',\n        display: 'flex',\n        flexDirection: 'column',\n      },\n    }\n\n    return (\n      <div style={styles.container}>\n        <div style={styles.chatContainer}>\n          <aside style={styles.whosOnlineListContainer}>\n          <WhosOnlineList\n              currentUser={this.state.currentUser}\n              users={this.state.currentRoom.users}\n            />\n          </aside>\n          <section style={styles.chatListContainer}>\n            <MessageList\n              messages={this.state.messages}\n              style={styles.chatList}\n            />\n            <TypingIndicator usersWhoAreTyping={this.state.usersWhoAreTyping} />\n            <SendMessageForm onSubmit={this.sendMessage}\n            onChange={this.sendTypingEvent}\n             />\n          </section>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ChatScreen"]},"metadata":{},"sourceType":"module"}